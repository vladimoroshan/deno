{
  "WebCryptoAPI": {
    "getRandomValues.any.html": true
  },
  "console": {
    "console-is-a-namespace.any.html": true,
    "console-label-conversion.any.html": true,
    "console-namespace-object-class-string.any.html": true,
    "console-tests-historical.any.html": true,
    "idlharness.any.html": [
      "console namespace: operation table(optional any, optional sequence<DOMString>)",
      "console namespace: operation dir(optional any, optional object?)",
      "console namespace: operation dirxml(any...)"
    ]
  },
  "dom": {
    "abort": {
      "event.any.html": true
    },
    "events": {
      "AddEventListenerOptions-signal.any.html": true,
      "Event-isTrusted.any.html": true,
      "EventTarget-constructible.any.html": true,
      "Event-constructors.any.html": [
        "Untitled 2",
        "Untitled 3"
      ]
    }
  },
  "encoding": {
    "api-basics.any.html": true,
    "api-invalid-label.any.html?1-1000": true,
    "api-invalid-label.any.html?1001-2000": true,
    "api-invalid-label.any.html?2001-3000": true,
    "api-invalid-label.any.html?3001-last": true,
    "api-replacement-encodings.any.html": true,
    "api-surrogates-utf8.any.html": true,
    "encodeInto.any.html": [
      "encodeInto() and a detached output buffer"
    ],
    "idlharness.any.html": [
      "TextDecoder interface: existence and properties of interface object",
      "TextDecoder interface: operation decode(optional BufferSource, optional TextDecodeOptions)",
      "TextDecoder interface: attribute encoding",
      "TextDecoder interface: attribute fatal",
      "TextDecoder interface: attribute ignoreBOM",
      "TextDecoder interface: new TextDecoder() must inherit property \"fatal\" with the proper type",
      "TextDecoder interface: new TextDecoder() must inherit property \"ignoreBOM\" with the proper type",
      "TextEncoder interface: existence and properties of interface object",
      "TextEncoder interface: operation encode(optional USVString)",
      "TextEncoder interface: operation encodeInto(USVString, Uint8Array)",
      "TextEncoder interface: attribute encoding",
      "TextEncoder interface: new TextEncoder() must inherit property \"encoding\" with the proper type",
      "TextDecoderStream interface: existence and properties of interface object",
      "TextDecoderStream interface object length",
      "TextDecoderStream interface object name",
      "TextDecoderStream interface: existence and properties of interface prototype object",
      "TextDecoderStream interface: existence and properties of interface prototype object's \"constructor\" property",
      "TextDecoderStream interface: existence and properties of interface prototype object's @@unscopables property",
      "TextDecoderStream interface: attribute encoding",
      "TextDecoderStream interface: attribute fatal",
      "TextDecoderStream interface: attribute ignoreBOM",
      "TextEncoderStream interface: existence and properties of interface object",
      "TextEncoderStream interface object length",
      "TextEncoderStream interface object name",
      "TextEncoderStream interface: existence and properties of interface prototype object",
      "TextEncoderStream interface: existence and properties of interface prototype object's \"constructor\" property",
      "TextEncoderStream interface: existence and properties of interface prototype object's @@unscopables property",
      "TextEncoderStream interface: attribute encoding"
    ],
    "iso-2022-jp-decoder.any.html": false,
    "legacy-mb-schinese": {
      "gb18030": {
        "gb18030-decoder.any.html": true
      },
      "gbk": {
        "gbk-decoder.any.html": true
      }
    },
    "replacement-encodings.any.html": false,
    "streams": {
      "backpressure.any.html": false,
      "decode-attributes.any.html": false,
      "decode-bad-chunks.any.html": false,
      "decode-ignore-bom.any.html": false,
      "decode-incomplete-input.any.html": false,
      "decode-non-utf8.any.html": false,
      "decode-split-character.any.html": false,
      "decode-utf8.any.html": false,
      "encode-bad-chunks.any.html": false,
      "encode-utf8.any.html": false,
      "readable-writable-properties.any.html": false
    },
    "textdecoder-byte-order-marks.any.html": true,
    "textdecoder-copy.any.html": false,
    "textdecoder-fatal-single-byte.any.html?1-1000": true,
    "textdecoder-fatal-single-byte.any.html?1001-2000": true,
    "textdecoder-fatal-single-byte.any.html?2001-3000": true,
    "textdecoder-fatal-single-byte.any.html?3001-4000": true,
    "textdecoder-fatal-single-byte.any.html?4001-5000": true,
    "textdecoder-fatal-single-byte.any.html?5001-6000": true,
    "textdecoder-fatal-single-byte.any.html?6001-7000": true,
    "textdecoder-fatal-single-byte.any.html?7001-last": true,
    "textdecoder-fatal-streaming.any.html": [
      "Fatal flag, streaming cases"
    ],
    "textdecoder-fatal.any.html": true,
    "textdecoder-ignorebom.any.html": true,
    "textdecoder-labels.any.html": [
      "cseucpkdfmtjapanese => EUC-JP",
      "euc-jp => EUC-JP",
      "x-euc-jp => EUC-JP",
      "csiso2022jp => ISO-2022-JP",
      "iso-2022-jp => ISO-2022-JP",
      "csshiftjis => Shift_JIS",
      "ms932 => Shift_JIS",
      "ms_kanji => Shift_JIS",
      "shift-jis => Shift_JIS",
      "shift_jis => Shift_JIS",
      "sjis => Shift_JIS",
      "windows-31j => Shift_JIS",
      "x-sjis => Shift_JIS",
      "cseuckr => EUC-KR",
      "csksc56011987 => EUC-KR",
      "euc-kr => EUC-KR",
      "iso-ir-149 => EUC-KR",
      "korean => EUC-KR",
      "ks_c_5601-1987 => EUC-KR",
      "ks_c_5601-1989 => EUC-KR",
      "ksc5601 => EUC-KR",
      "ksc_5601 => EUC-KR",
      "windows-949 => EUC-KR",
      "x-user-defined => x-user-defined"
    ],
    "textdecoder-streaming.any.html": false,
    "textdecoder-utf16-surrogates.any.html": true,
    "textencoder-constructor-non-utf.any.html": [
      "Encoding argument supported for decode: EUC-JP",
      "Encoding argument supported for decode: ISO-2022-JP",
      "Encoding argument supported for decode: Shift_JIS",
      "Encoding argument supported for decode: EUC-KR",
      "Encoding argument supported for decode: x-user-defined"
    ],
    "textencoder-utf16-surrogates.any.html": true,
    "unsupported-encodings.any.html": false,
    "textdecoder-arguments.any.html": false
  },
  "hr-time": {
    "monotonic-clock.any.html": true,
    "basic.any.html": [
      "Performance interface extends EventTarget."
    ],
    "idlharness.any.html": [
      "Performance interface: existence and properties of interface object",
      "Performance interface: existence and properties of interface prototype object",
      "Performance interface: operation now()",
      "Performance interface: attribute timeOrigin",
      "Performance interface: operation toJSON()",
      "Stringification of performance",
      "Performance interface: performance must inherit property \"timeOrigin\" with the proper type",
      "Performance interface: performance must inherit property \"toJSON()\" with the proper type",
      "Performance interface: default toJSON operation on performance",
      "Window interface: attribute performance"
    ]
  },
  "streams": {
    "idlharness.any.html": [
      "ReadableStream interface object length",
      "ReadableStream interface: attribute locked",
      "ReadableStream interface: operation cancel(optional any)",
      "ReadableStream interface: operation getReader(optional ReadableStreamGetReaderOptions)",
      "ReadableStream interface: operation pipeThrough(ReadableWritablePair, optional StreamPipeOptions)",
      "ReadableStream interface: operation pipeTo(WritableStream, optional StreamPipeOptions)",
      "ReadableStream interface: operation tee()",
      "ReadableStream interface: async iterable<any>",
      "Stringification of new ReadableStream()",
      "ReadableStream interface: calling pipeTo(WritableStream, optional StreamPipeOptions) on new ReadableStream() with too few arguments must throw TypeError",
      "ReadableStreamDefaultReader interface: existence and properties of interface object",
      "ReadableStreamDefaultReader interface: existence and properties of interface prototype object",
      "ReadableStreamDefaultReader interface: operation read()",
      "ReadableStreamDefaultReader interface: operation releaseLock()",
      "ReadableStreamDefaultReader interface: attribute closed",
      "ReadableStreamDefaultReader interface: operation cancel(optional any)",
      "Stringification of (new ReadableStream()).getReader()",
      "ReadableStreamBYOBReader interface: existence and properties of interface object",
      "ReadableStreamBYOBReader interface object length",
      "ReadableStreamBYOBReader interface object name",
      "ReadableStreamBYOBReader interface: existence and properties of interface prototype object",
      "ReadableStreamBYOBReader interface: existence and properties of interface prototype object's \"constructor\" property",
      "ReadableStreamBYOBReader interface: existence and properties of interface prototype object's @@unscopables property",
      "ReadableStreamBYOBReader interface: operation read(ArrayBufferView)",
      "ReadableStreamBYOBReader interface: operation releaseLock()",
      "ReadableStreamBYOBReader interface: attribute closed",
      "ReadableStreamBYOBReader interface: operation cancel(optional any)",
      "ReadableStreamBYOBReader must be primary interface of (new ReadableStream({ type: 'bytes' })).getReader({ mode: 'byob' })",
      "Stringification of (new ReadableStream({ type: 'bytes' })).getReader({ mode: 'byob' })",
      "ReadableStreamBYOBReader interface: (new ReadableStream({ type: 'bytes' })).getReader({ mode: 'byob' }) must inherit property \"read(ArrayBufferView)\" with the proper type",
      "ReadableStreamBYOBReader interface: calling read(ArrayBufferView) on (new ReadableStream({ type: 'bytes' })).getReader({ mode: 'byob' }) with too few arguments must throw TypeError",
      "ReadableStreamBYOBReader interface: (new ReadableStream({ type: 'bytes' })).getReader({ mode: 'byob' }) must inherit property \"releaseLock()\" with the proper type",
      "ReadableStreamBYOBReader interface: (new ReadableStream({ type: 'bytes' })).getReader({ mode: 'byob' }) must inherit property \"closed\" with the proper type",
      "ReadableStreamBYOBReader interface: (new ReadableStream({ type: 'bytes' })).getReader({ mode: 'byob' }) must inherit property \"cancel(optional any)\" with the proper type",
      "ReadableStreamBYOBReader interface: calling cancel(optional any) on (new ReadableStream({ type: 'bytes' })).getReader({ mode: 'byob' }) with too few arguments must throw TypeError",
      "ReadableStreamDefaultController interface: existence and properties of interface object",
      "ReadableStreamDefaultController interface object length",
      "ReadableStreamDefaultController interface object name",
      "ReadableStreamDefaultController interface: existence and properties of interface prototype object",
      "ReadableStreamDefaultController interface: existence and properties of interface prototype object's \"constructor\" property",
      "ReadableStreamDefaultController interface: existence and properties of interface prototype object's @@unscopables property",
      "ReadableStreamDefaultController interface: attribute desiredSize",
      "ReadableStreamDefaultController interface: operation close()",
      "ReadableStreamDefaultController interface: operation enqueue(optional any)",
      "ReadableStreamDefaultController interface: operation error(optional any)",
      "ReadableStreamDefaultController must be primary interface of self.readableStreamDefaultController",
      "Stringification of self.readableStreamDefaultController",
      "ReadableByteStreamController interface: existence and properties of interface object",
      "ReadableByteStreamController interface object length",
      "ReadableByteStreamController interface object name",
      "ReadableByteStreamController interface: existence and properties of interface prototype object",
      "ReadableByteStreamController interface: existence and properties of interface prototype object's \"constructor\" property",
      "ReadableByteStreamController interface: existence and properties of interface prototype object's @@unscopables property",
      "ReadableByteStreamController interface: attribute byobRequest",
      "ReadableByteStreamController interface: attribute desiredSize",
      "ReadableByteStreamController interface: operation close()",
      "ReadableByteStreamController interface: operation enqueue(ArrayBufferView)",
      "ReadableByteStreamController interface: operation error(optional any)",
      "ReadableByteStreamController must be primary interface of self.readableByteStreamController",
      "Stringification of self.readableByteStreamController",
      "ReadableByteStreamController interface: self.readableByteStreamController must inherit property \"byobRequest\" with the proper type",
      "ReadableStreamBYOBRequest interface: existence and properties of interface object",
      "ReadableStreamBYOBRequest interface object length",
      "ReadableStreamBYOBRequest interface object name",
      "ReadableStreamBYOBRequest interface: existence and properties of interface prototype object",
      "ReadableStreamBYOBRequest interface: existence and properties of interface prototype object's \"constructor\" property",
      "ReadableStreamBYOBRequest interface: existence and properties of interface prototype object's @@unscopables property",
      "ReadableStreamBYOBRequest interface: attribute view",
      "ReadableStreamBYOBRequest interface: operation respond(unsigned long long)",
      "ReadableStreamBYOBRequest interface: operation respondWithNewView(ArrayBufferView)",
      "ReadableStreamBYOBRequest must be primary interface of self.readableStreamByobRequest",
      "Stringification of self.readableStreamByobRequest",
      "ReadableStreamBYOBRequest interface: self.readableStreamByobRequest must inherit property \"view\" with the proper type",
      "ReadableStreamBYOBRequest interface: self.readableStreamByobRequest must inherit property \"respond(unsigned long long)\" with the proper type",
      "ReadableStreamBYOBRequest interface: calling respond(unsigned long long) on self.readableStreamByobRequest with too few arguments must throw TypeError",
      "ReadableStreamBYOBRequest interface: self.readableStreamByobRequest must inherit property \"respondWithNewView(ArrayBufferView)\" with the proper type",
      "ReadableStreamBYOBRequest interface: calling respondWithNewView(ArrayBufferView) on self.readableStreamByobRequest with too few arguments must throw TypeError",
      "WritableStream interface: attribute locked",
      "WritableStream interface: operation abort(optional any)",
      "WritableStream interface: operation close()",
      "WritableStream interface: operation getWriter()",
      "Stringification of new WritableStream()",
      "WritableStreamDefaultWriter interface: attribute closed",
      "WritableStreamDefaultWriter interface: attribute desiredSize",
      "WritableStreamDefaultWriter interface: attribute ready",
      "WritableStreamDefaultWriter interface: operation abort(optional any)",
      "WritableStreamDefaultWriter interface: operation close()",
      "WritableStreamDefaultWriter interface: operation releaseLock()",
      "WritableStreamDefaultWriter interface: operation write(optional any)",
      "Stringification of (new WritableStream()).getWriter()",
      "WritableStreamDefaultController interface: existence and properties of interface object",
      "WritableStreamDefaultController interface object length",
      "WritableStreamDefaultController interface object name",
      "WritableStreamDefaultController interface: existence and properties of interface prototype object",
      "WritableStreamDefaultController interface: existence and properties of interface prototype object's \"constructor\" property",
      "WritableStreamDefaultController interface: existence and properties of interface prototype object's @@unscopables property",
      "WritableStreamDefaultController interface: operation error(optional any)",
      "WritableStreamDefaultController must be primary interface of self.writableStreamDefaultController",
      "Stringification of self.writableStreamDefaultController",
      "TransformStream interface: attribute readable",
      "TransformStream interface: attribute writable",
      "Stringification of new TransformStream()",
      "TransformStreamDefaultController interface: existence and properties of interface object",
      "TransformStreamDefaultController interface object length",
      "TransformStreamDefaultController interface object name",
      "TransformStreamDefaultController interface: existence and properties of interface prototype object",
      "TransformStreamDefaultController interface: existence and properties of interface prototype object's \"constructor\" property",
      "TransformStreamDefaultController interface: existence and properties of interface prototype object's @@unscopables property",
      "TransformStreamDefaultController interface: attribute desiredSize",
      "TransformStreamDefaultController interface: operation enqueue(optional any)",
      "TransformStreamDefaultController interface: operation error(optional any)",
      "TransformStreamDefaultController interface: operation terminate()",
      "TransformStreamDefaultController must be primary interface of self.transformStreamDefaultController",
      "Stringification of self.transformStreamDefaultController",
      "ByteLengthQueuingStrategy interface: attribute highWaterMark",
      "ByteLengthQueuingStrategy interface: attribute size",
      "Stringification of new ByteLengthQueuingStrategy({ highWaterMark: 5 })",
      "ByteLengthQueuingStrategy interface: new ByteLengthQueuingStrategy({ highWaterMark: 5 }) must inherit property \"highWaterMark\" with the proper type",
      "CountQueuingStrategy interface: attribute highWaterMark",
      "CountQueuingStrategy interface: attribute size",
      "Stringification of new CountQueuingStrategy({ highWaterMark: 5 })",
      "CountQueuingStrategy interface: new CountQueuingStrategy({ highWaterMark: 5 }) must inherit property \"highWaterMark\" with the proper type"
    ],
    "piping": {
      "abort.any.html": [
        "a signal argument 'null' should cause pipeTo() to reject",
        "a signal argument 'AbortSignal' should cause pipeTo() to reject",
        "a signal argument 'true' should cause pipeTo() to reject",
        "a signal argument '-1' should cause pipeTo() to reject",
        "a signal argument '[object AbortSignal]' should cause pipeTo() to reject"
      ],
      "close-propagation-backward.any.html": [
        "Closing must be propagated backward: starts closed; preventCancel = null (falsy); fulfilled cancel promise",
        "Closing must be propagated backward: starts closed; preventCancel = 0 (falsy); fulfilled cancel promise",
        "Closing must be propagated backward: starts closed; preventCancel = -0 (falsy); fulfilled cancel promise",
        "Closing must be propagated backward: starts closed; preventCancel = NaN (falsy); fulfilled cancel promise",
        "Closing must be propagated backward: starts closed; preventCancel =  (falsy); fulfilled cancel promise",
        "Closing must be propagated backward: starts closed; preventCancel = a (truthy)",
        "Closing must be propagated backward: starts closed; preventCancel = 1 (truthy)",
        "Closing must be propagated backward: starts closed; preventCancel = Symbol() (truthy)",
        "Closing must be propagated backward: starts closed; preventCancel = [object Object] (truthy)"
      ],
      "close-propagation-forward.any.html": [
        "Closing must be propagated forward: starts closed; preventClose = null (falsy); fulfilled close promise",
        "Closing must be propagated forward: starts closed; preventClose = 0 (falsy); fulfilled close promise",
        "Closing must be propagated forward: starts closed; preventClose = -0 (falsy); fulfilled close promise",
        "Closing must be propagated forward: starts closed; preventClose = NaN (falsy); fulfilled close promise",
        "Closing must be propagated forward: starts closed; preventClose =  (falsy); fulfilled close promise",
        "Closing must be propagated forward: starts closed; preventClose = a (truthy)",
        "Closing must be propagated forward: starts closed; preventClose = 1 (truthy)",
        "Closing must be propagated forward: starts closed; preventClose = Symbol() (truthy)",
        "Closing must be propagated forward: starts closed; preventClose = [object Object] (truthy)"
      ],
      "error-propagation-backward.any.html": [
        "Errors must be propagated backward: becomes errored before piping due to write; preventCancel = null (falsy); fulfilled cancel promise",
        "Errors must be propagated backward: becomes errored before piping due to write; preventCancel = 0 (falsy); fulfilled cancel promise",
        "Errors must be propagated backward: becomes errored before piping due to write; preventCancel = -0 (falsy); fulfilled cancel promise",
        "Errors must be propagated backward: becomes errored before piping due to write; preventCancel = NaN (falsy); fulfilled cancel promise",
        "Errors must be propagated backward: becomes errored before piping due to write; preventCancel =  (falsy); fulfilled cancel promise",
        "Errors must be propagated backward: becomes errored before piping due to write; preventCancel = a (truthy)",
        "Errors must be propagated backward: becomes errored before piping due to write; preventCancel = 1 (truthy)",
        "Errors must be propagated backward: becomes errored before piping due to write; preventCancel = Symbol() (truthy)",
        "Errors must be propagated backward: becomes errored before piping due to write; preventCancel = [object Object] (truthy)"
      ],
      "error-propagation-forward.any.html": [
        "Errors must be propagated forward: starts errored; preventAbort = null (falsy); fulfilled abort promise",
        "Errors must be propagated forward: starts errored; preventAbort = 0 (falsy); fulfilled abort promise",
        "Errors must be propagated forward: starts errored; preventAbort = -0 (falsy); fulfilled abort promise",
        "Errors must be propagated forward: starts errored; preventAbort = NaN (falsy); fulfilled abort promise",
        "Errors must be propagated forward: starts errored; preventAbort =  (falsy); fulfilled abort promise",
        "Errors must be propagated forward: starts errored; preventAbort = a (truthy)",
        "Errors must be propagated forward: starts errored; preventAbort = 1 (truthy)",
        "Errors must be propagated forward: starts errored; preventAbort = Symbol() (truthy)",
        "Errors must be propagated forward: starts errored; preventAbort = [object Object] (truthy)"
      ],
      "flow-control.any.html": true,
      "general.any.html": [
        "pipeTo must check the brand of its ReadableStream this value",
        "pipeTo must check the brand of its WritableStream argument",
        "pipeTo() promise should resolve if null is passed"
      ],
      "multiple-propagation.any.html": true,
      "pipe-through.any.html": true,
      "then-interception.any.html": true,
      "throwing-options.any.html": false,
      "transform-streams.any.html": true
    },
    "queuing-strategies.any.html": true,
    "readable-byte-streams": {
      "bad-buffers-and-views.any.html": [
        "ReadableStream with byte source: respond() throws if the BYOB request's buffer has been detached (in the readable state)",
        "ReadableStream with byte source: respond() throws if the BYOB request's buffer has been detached (in the closed state)",
        "ReadableStream with byte source: respondWithNewView() throws if the supplied view's buffer has been detached (in the readable state)",
        "ReadableStream with byte source: respondWithNewView() throws if the supplied view's buffer is zero-length (in the readable state)",
        "ReadableStream with byte source: respondWithNewView() throws if the supplied view is zero-length on a non-zero-length buffer (in the readable state)",
        "ReadableStream with byte source: respondWithNewView() throws if the supplied view's buffer has been detached (in the closed state)",
        "ReadableStream with byte source: respondWithNewView() throws if the supplied view's buffer is zero-length (in the closed state)",
        "ReadableStream with byte source: respondWithNewView() throws if the supplied view is zero-length on a non-zero-length buffer (in the closed state)",
        "ReadableStream with byte source: read()ing from a closed stream still transfers the buffer",
        "ReadableStream with byte source: read()ing from a stream with queued chunks still transfers the buffer",
        "ReadableStream with byte source: reading into an already-detached buffer rejects",
        "ReadableStream with byte source: reading into a zero-length buffer rejects",
        "ReadableStream with byte source: reading into a zero-length view on a non-zero-length buffer rejects"
      ],
      "construct-byob-request.any.html": false,
      "general.any.html": [
        "getReader({mode: \"byob\"}) throws on non-bytes streams",
        "ReadableStream with byte source can be constructed with no errors",
        "getReader({mode}) must perform ToString()",
        "ReadableStream with byte source: autoAllocateChunkSize cannot be 0",
        "ReadableStreamBYOBReader can be constructed directly",
        "ReadableStreamBYOBReader constructor requires a ReadableStream argument",
        "ReadableStreamBYOBReader constructor requires an unlocked ReadableStream",
        "ReadableStreamBYOBReader constructor requires a ReadableStream with type \"bytes\"",
        "ReadableStream with byte source: getReader() with mode set to byob, then releaseLock()",
        "ReadableStream with byte source: Test that closing a stream does not release a BYOB reader automatically",
        "ReadableStream with byte source: Test that erroring a stream does not release a BYOB reader automatically",
        "ReadableStream with byte source: autoAllocateChunkSize",
        "ReadableStream with byte source: Mix of auto allocate and BYOB",
        "ReadableStream with byte source: enqueue(), read(view) partially, then read()",
        "ReadableStream with byte source: Respond to pull() by enqueue()",
        "ReadableStream with byte source: Respond to pull() by enqueue() asynchronously",
        "ReadableStream with byte source: Respond to multiple pull() by separate enqueue()",
        "ReadableStream with byte source: read(view), then respond()",
        "ReadableStream with byte source: read(view), then respond() with a transferred ArrayBuffer",
        "ReadableStream with byte source: read(view), then respond() with too big value",
        "ReadableStream with byte source: respond(3) to read(view) with 2 element Uint16Array enqueues the 1 byte remainder",
        "ReadableStream with byte source: enqueue(), getReader(), then read(view)",
        "ReadableStream with byte source: enqueue(), getReader(), then cancel() (mode = BYOB)",
        "ReadableStream with byte source: getReader(), read(view), then cancel()",
        "ReadableStream with byte source: cancel() with partially filled pending pull() request",
        "ReadableStream with byte source: enqueue(), getReader(), then read(view) where view.buffer is not fully covered by view",
        "ReadableStream with byte source: Multiple enqueue(), getReader(), then read(view)",
        "ReadableStream with byte source: enqueue(), getReader(), then read(view) with a bigger view",
        "ReadableStream with byte source: enqueue(), getReader(), then read(view) with smaller views",
        "ReadableStream with byte source: enqueue() 1 byte, getReader(), then read(view) with Uint16Array",
        "ReadableStream with byte source: enqueue() 3 byte, getReader(), then read(view) with 2-element Uint16Array",
        "ReadableStream with byte source: read(view) with Uint16Array on close()-d stream with 1 byte enqueue()-d must fail",
        "ReadableStream with byte source: A stream must be errored if close()-d before fulfilling read(view) with Uint16Array",
        "ReadableStream with byte source: read(view), then respond() and close() in pull()",
        "ReadableStream with byte source: read(view) with Uint32Array, then fill it by multiple respond() calls",
        "ReadableStream with byte source: read() twice, then enqueue() twice",
        "ReadableStream with byte source: Multiple read(view), close() and respond()",
        "ReadableStream with byte source: Multiple read(view), big enqueue()",
        "ReadableStream with byte source: Multiple read(view) and multiple enqueue()",
        "ReadableStream with byte source: read(view) with passing undefined as view must fail",
        "ReadableStream with byte source: read(view) with passing an empty object as view must fail",
        "ReadableStream with byte source: Even read(view) with passing ArrayBufferView like object as view must fail",
        "ReadableStream with byte source: read(view) on an errored stream",
        "ReadableStream with byte source: read(view), then error()",
        "ReadableStream with byte source: Throwing in pull function must error the stream",
        "ReadableStream with byte source: Throwing in pull in response to read() must be ignored if the stream is errored in it",
        "ReadableStream with byte source: Throwing in pull in response to read(view) function must error the stream",
        "ReadableStream with byte source: Throwing in pull in response to read(view) must be ignored if the stream is errored in it",
        "calling respond() twice on the same byobRequest should throw",
        "calling respondWithNewView() twice on the same byobRequest should throw",
        "calling respond(0) twice on the same byobRequest should throw even when closed",
        "pull() resolving should not make releaseLock() possible",
        "ReadableStream with byte source: default reader + autoAllocateChunkSize + byobRequest interaction"
      ]
    },
    "readable-streams": {
      "async-iterator.any.html": [
        "Async iterator instances should have the correct list of properties",
        "values() throws if there's already a lock",
        "return() should unlock the stream synchronously when preventCancel = false",
        "return() should unlock the stream synchronously when preventCancel = true",
        "Async-iterating a pull source manually",
        "Cancellation behavior when throwing inside loop body; preventCancel = false",
        "Cancellation behavior when throwing inside loop body; preventCancel = true",
        "Cancellation behavior when breaking inside loop body; preventCancel = false",
        "Cancellation behavior when breaking inside loop body; preventCancel = true",
        "Cancellation behavior when returning inside loop body; preventCancel = false",
        "Cancellation behavior when returning inside loop body; preventCancel = true",
        "Cancellation behavior when manually calling return(); preventCancel = false",
        "Cancellation behavior when manually calling return(); preventCancel = true",
        "next() rejects if the stream errors",
        "return() does not rejects if the stream has not errored yet",
        "return() rejects if the stream has errored",
        "next() that succeeds; next() that reports an error; next()"
      ],
      "bad-strategies.any.html": true,
      "bad-underlying-sources.any.html": true,
      "cancel.any.html": false,
      "constructor.any.html": false,
      "count-queuing-strategy-integration.any.html": true,
      "default-reader.any.html": true,
      "floating-point-total-queue-size.any.html": true,
      "garbage-collection.any.html": true,
      "general.any.html": [
        "ReadableStream: if pull rejects, it should error the stream"
      ],
      "patched-global.any.html": true,
      "reentrant-strategies.any.html": true,
      "tee.any.html": false,
      "templated.any.html": [
        "ReadableStream (empty) reader: canceling via the stream should fail"
      ]
    },
    "transform-streams": {
      "backpressure.any.html": true,
      "errors.any.html": true,
      "flush.any.html": true,
      "general.any.html": true,
      "lipfuzz.any.html": true,
      "patched-global.any.html": [
        "TransformStream constructor should not call setters for highWaterMark or size"
      ],
      "properties.any.html": true,
      "reentrant-strategies.any.html": true,
      "strategies.any.html": true,
      "terminate.any.html": [
        "controller.terminate() inside flush() should not prevent writer.close() from succeeding"
      ]
    },
    "writable-streams": {
      "aborting.any.html": false,
      "bad-strategies.any.html": [
        "reject any non-function value for strategy.size",
        "Writable stream: invalid size beats invalid highWaterMark"
      ],
      "bad-underlying-sinks.any.html": true,
      "byte-length-queuing-strategy.any.html": true,
      "close.any.html": false,
      "constructor.any.html": [
        "underlyingSink argument should be converted after queuingStrategy argument",
        "WritableStreamDefaultController constructor should throw",
        "WritableStreamDefaultController constructor should throw when passed an initialised WritableStream",
        "WritableStreamDefaultWriter should throw unless passed a WritableStream"
      ],
      "count-queuing-strategy.any.html": true,
      "error.any.html": true,
      "floating-point-total-queue-size.any.html": true,
      "general.any.html": true,
      "properties.any.html": true,
      "reentrant-strategy.any.html": true,
      "start.any.html": true,
      "write.any.html": true
    }
  },
  "user-timing": {
    "buffered-flag.any.html": false,
    "case-sensitivity.any.html": false,
    "clear_all_marks.any.html": true,
    "clear_all_measures.any.html": true,
    "clear_non_existent_mark.any.html": true,
    "clear_non_existent_measure.any.html": true,
    "clear_one_mark.any.html": true,
    "clear_one_measure.any.html": true,
    "entry_type.any.html": true,
    "idlharness.any.html": [
      "PerformanceMark interface: attribute detail",
      "PerformanceMeasure interface object length",
      "PerformanceMeasure interface: attribute detail",
      "Performance interface: operation mark(DOMString, optional PerformanceMarkOptions)",
      "Performance interface: operation clearMarks(optional DOMString)",
      "Performance interface: operation measure(DOMString, optional (DOMString or PerformanceMeasureOptions), optional DOMString)",
      "Performance interface: operation clearMeasures(optional DOMString)",
      "Performance interface: calling mark(DOMString, optional PerformanceMarkOptions) on performance with too few arguments must throw TypeError",
      "Performance interface: calling measure(DOMString, optional (DOMString or PerformanceMeasureOptions), optional DOMString) on performance with too few arguments must throw TypeError"
    ],
    "mark-entry-constructor.any.html": true,
    "mark-errors.any.html": true,
    "mark-l3.any.html": false,
    "mark-measure-return-objects.any.html": true,
    "mark.any.html": true,
    "measure-l3.any.html": true,
    "measure-with-dict.any.html": [
      "measure entries' detail and start/end are customizable"
    ],
    "measure_syntax_err.any.html": true,
    "structured-serialize-detail.any.html": true,
    "supported-usertiming-types.any.html": false,
    "user_timing_exists.any.html": true
  },
  "wasm": {
    "jsapi": {
      "constructor": {
        "compile.any.html": true,
        "instantiate-bad-imports.any.html": false,
        "instantiate.any.html": [
          "Synchronous options handling: Buffer argument"
        ],
        "multi-value.any.html": true,
        "toStringTag.any.html": true,
        "validate.any.html": true
      },
      "global": {
        "constructor.any.html": true,
        "toString.any.html": true,
        "type.tentative.any.html": false,
        "value-get-set.any.html": true,
        "valueOf.any.html": true
      },
      "idlharness.any.html": [
        "Table interface: operation set(unsigned long, optional any)"
      ],
      "instance": {
        "constructor-bad-imports.any.html": false,
        "constructor-caching.any.html": true,
        "constructor.any.html": true,
        "exports.any.html": [
          "Setting (sloppy mode)"
        ],
        "toString.any.html": true
      },
      "interface.any.html": [
        "WebAssembly: property descriptor"
      ],
      "memory": {
        "buffer.any.html": [
          "Setting (sloppy mode)"
        ],
        "constructor.any.html": true,
        "grow.any.html": true,
        "toString.any.html": true,
        "type.tentative.any.html": false,
        "constructor-shared.tentative.any.html": true,
        "constructor-types.tentative.any.html": false
      },
      "module": {
        "constructor.any.html": true,
        "customSections.any.html": true,
        "exports.any.html": true,
        "imports.any.html": true,
        "toString.any.html": true
      },
      "prototypes.any.html": false,
      "table": {
        "constructor.any.html": true,
        "get-set.any.html": true,
        "grow.any.html": true,
        "length.any.html": [
          "Setting (sloppy mode)"
        ],
        "toString.any.html": true,
        "constructor-reftypes.tentative.any.html": [
          "initialize externref table with default value",
          "initialize anyfunc table with default value",
          "initialize anyfunc table with a bad default value"
        ],
        "constructor-types.tentative.any.html": false,
        "grow-reftypes.tentative.any.html": false,
        "set-reftypes.tentative.any.html": false,
        "type.tentative.any.html": false
      }
    },
    "serialization": {
      "module": {
        "serialization-via-idb.any.html": false,
        "serialization-via-notifications-api.any.html": false
      }
    },
    "webapi": {
      "abort.any.html": false,
      "body.any.html": false,
      "contenttype.any.html": false,
      "empty-body.any.html": false,
      "historical.any.html": false,
      "idlharness.any.html": [
        "WebAssembly namespace: operation compileStreaming(Promise<Response>)",
        "WebAssembly namespace: operation instantiateStreaming(Promise<Response>, optional object)"
      ],
      "instantiateStreaming-bad-imports.any.html": false,
      "instantiateStreaming.any.html": false,
      "invalid-args.any.html": false,
      "invalid-code.any.html": false,
      "modified-contenttype.any.html": false,
      "origin.sub.any.html": false,
      "rejected-arg.any.html": false,
      "status.any.html": false
    }
  },
  "WebIDL": {
    "ecmascript-binding": {
      "es-exceptions": {
        "DOMException-constants.any.html": true,
        "DOMException-constructor-and-prototype.any.html": true,
        "DOMException-constructor-behavior.any.html": true,
        "DOMException-custom-bindings.any.html": [
          "does not inherit from Error: class-side"
        ]
      }
    }
  },
  "url": {
    "historical.any.html": [
      "<a> and <area>.searchParams should be undefined"
    ],
    "idlharness.any.html": [
      "URL interface object length",
      "URL interface: attribute href",
      "URL interface: stringifier",
      "URL interface: attribute origin",
      "URL interface: attribute protocol",
      "URL interface: attribute username",
      "URL interface: attribute password",
      "URL interface: attribute host",
      "URL interface: attribute hostname",
      "URL interface: attribute port",
      "URL interface: attribute pathname",
      "URL interface: attribute search",
      "URL interface: attribute searchParams",
      "URL interface: attribute hash",
      "URL interface: operation toJSON()",
      "Stringification of new URL(\"http://foo\")",
      "URLSearchParams interface: operation append(USVString, USVString)",
      "URLSearchParams interface: operation delete(USVString)",
      "URLSearchParams interface: operation get(USVString)",
      "URLSearchParams interface: operation getAll(USVString)",
      "URLSearchParams interface: operation has(USVString)",
      "URLSearchParams interface: operation set(USVString, USVString)",
      "URLSearchParams interface: operation sort()",
      "URLSearchParams interface: iterable<USVString, USVString>",
      "URLSearchParams interface: stringifier",
      "Stringification of new URLSearchParams(\"hi=there&thank=you\")"
    ],
    "url-constructor.any.html": [
      "Parsing: <file://%43%7C> against <about:blank>",
      "Parsing: <file://%43|> against <about:blank>",
      "Parsing: <file://C%7C> against <about:blank>",
      "Parsing: <file://%43%7C/> against <about:blank>",
      "Parsing: <https://%43%7C/> against <about:blank>",
      "Parsing: <asdf://%43|/> against <about:blank>",
      "Parsing: </> against <file://h/C:/a/b>",
      "Parsing: <file:\\\\//> against <about:blank>",
      "Parsing: <file:\\\\\\\\> against <about:blank>",
      "Parsing: <file:\\\\\\\\?fox> against <about:blank>",
      "Parsing: <file:\\\\\\\\#guppy> against <about:blank>",
      "Parsing: <file://spider///> against <about:blank>",
      "Parsing: <file:\\\\localhost//> against <about:blank>",
      "Parsing: <file://\\/localhost//cat> against <about:blank>",
      "Parsing: <file://localhost//a//../..//> against <about:blank>",
      "Parsing: </////mouse> against <file:///elephant>",
      "Parsing: <\\/localhost//pig> against <file://lion/>",
      "Parsing: <//localhost//pig> against <file://lion/>",
      "Parsing: </..//localhost//pig> against <file://lion/>",
      "Parsing: <C|> against <file://host/dir/file>",
      "Parsing: <C|> against <file://host/D:/dir1/dir2/file>",
      "Parsing: <C|#> against <file://host/dir/file>",
      "Parsing: <C|?> against <file://host/dir/file>",
      "Parsing: <C|/> against <file://host/dir/file>",
      "Parsing: <C|\n/> against <file://host/dir/file>",
      "Parsing: <C|\\> against <file://host/dir/file>",
      "Parsing: </c:/foo/bar> against <file://host/path>",
      "Parsing: <file://example.net/C:/> against <about:blank>",
      "Parsing: <file://1.2.3.4/C:/> against <about:blank>",
      "Parsing: <file://[1::8]/C:/> against <about:blank>",
      "Parsing: <C|/> against <file://host/>",
      "Parsing: </C:/> against <file://host/>",
      "Parsing: <file:C:/> against <file://host/>",
      "Parsing: <file:/C:/> against <file://host/>",
      "Parsing: <file://localhost//a//../..//foo> against <about:blank>",
      "Parsing: <file://localhost////foo> against <about:blank>",
      "Parsing: <file:////foo> against <about:blank>",
      "Parsing: <file:////one/two> against <file:///>",
      "Parsing: <////one/two> against <file:///>",
      "Parsing: <file:///.//> against <file:////>",
      "Parsing: <file:.//p> against <about:blank>",
      "Parsing: <file:/.//p> against <about:blank>",
      "Parsing: <non-spec:/.//> against <about:blank>",
      "Parsing: <non-spec:/..//> against <about:blank>",
      "Parsing: <non-spec:/a/..//> against <about:blank>",
      "Parsing: <non-spec:/.//path> against <about:blank>",
      "Parsing: <non-spec:/..//path> against <about:blank>",
      "Parsing: <non-spec:/a/..//path> against <about:blank>",
      "Parsing: </.//path> against <non-spec:/p>",
      "Parsing: </..//path> against <non-spec:/p>",
      "Parsing: <..//path> against <non-spec:/p>",
      "Parsing: <a/..//path> against <non-spec:/p>",
      "Parsing: <> against <non-spec:/..//p>",
      "Parsing: <path> against <non-spec:/..//p>"
    ],
    "url-origin.any.html": true,
    "url-searchparams.any.html": true,
    "url-setters-stripping.any.html": [
      "Setting protocol with leading U+0000 (https:)",
      "Setting protocol with U+0000 before inserted colon (https:)",
      "Setting port with leading U+0000 (https:)",
      "Setting pathname with trailing U+0000 (https:)",
      "Setting protocol with leading U+001F (https:)",
      "Setting protocol with U+001F before inserted colon (https:)",
      "Setting port with leading U+001F (https:)",
      "Setting pathname with trailing U+001F (https:)",
      "Setting protocol with leading U+0000 (wpt++:)",
      "Setting protocol with U+0000 before inserted colon (wpt++:)",
      "Setting port with leading U+0000 (wpt++:)",
      "Setting pathname with trailing U+0000 (wpt++:)",
      "Setting protocol with leading U+001F (wpt++:)",
      "Setting protocol with U+001F before inserted colon (wpt++:)",
      "Setting port with leading U+001F (wpt++:)",
      "Setting pathname with trailing U+001F (wpt++:)"
    ],
    "url-tojson.any.html": true,
    "urlencoded-parser.any.html": true,
    "urlsearchparams-append.any.html": true,
    "urlsearchparams-constructor.any.html": [
      "Construct with 2 unpaired surrogates (no trailing)",
      "Construct with 3 unpaired surrogates (no leading)",
      "Construct with object with NULL, non-ASCII, and surrogate keys"
    ],
    "urlsearchparams-delete.any.html": true,
    "urlsearchparams-foreach.any.html": true,
    "urlsearchparams-get.any.html": true,
    "urlsearchparams-getall.any.html": true,
    "urlsearchparams-has.any.html": true,
    "urlsearchparams-set.any.html": true,
    "urlsearchparams-sort.any.html": true,
    "urlsearchparams-stringifier.any.html": true
  },
  "fetch": {
    "api": {
      "request": {
        "request-init-002.any.html": true,
        "request-init-stream.any.html": [
          "Constructing a Request with a Request on which body.getReader() is called",
          "Constructing a Request with a Request on which body.getReader().read() is called",
          "Constructing a Request with a Request on which read() and releaseLock() are called"
        ],
        "request-consume-empty.any.html": [
          "Consume empty FormData request body as text"
        ],
        "request-consume.any.html": true
      },
      "headers": {
        "headers-basic.any.html": true,
        "headers-casing.any.html": true,
        "headers-combine.any.html": true,
        "headers-errors.any.html": true,
        "headers-normalize.any.html": true,
        "headers-record.any.html": true,
        "headers-structure.any.html": true
      },
      "basic": {
        "request-head.any.html": true,
        "request-headers-case.any.html": false,
        "request-headers-nonascii.any.html": false,
        "request-headers.any.html": [
          "Fetch with PUT without body",
          "Fetch with PUT with body",
          "Fetch with POST without body",
          "Fetch with POST with text body",
          "Fetch with POST with FormData body",
          "Fetch with POST with URLSearchParams body",
          "Fetch with POST with Blob body",
          "Fetch with POST with ArrayBuffer body",
          "Fetch with POST with Uint8Array body",
          "Fetch with POST with Int8Array body",
          "Fetch with POST with Float32Array body",
          "Fetch with POST with Float64Array body",
          "Fetch with POST with DataView body",
          "Fetch with POST with Blob body with mime type",
          "Fetch with Chicken",
          "Fetch with Chicken with body",
          "Fetch with POST and mode \"same-origin\" needs an Origin header",
          "Fetch with POST and mode \"no-cors\" needs an Origin header",
          "Fetch with PUT and mode \"same-origin\" needs an Origin header",
          "Fetch with TacO and mode \"same-origin\" needs an Origin header",
          "Fetch with TacO and mode \"cors\" needs an Origin header"
        ],
        "text-utf8.any.html": true,
        "accept-header.any.html": [
          "Request through fetch should have a 'accept-language' header"
        ],
        "conditional-get.any.html": false,
        "error-after-response.any.html": false,
        "header-value-combining.any.html": false,
        "header-value-null-byte.any.html": true,
        "historical.any.html": true,
        "http-response-code.any.html": true,
        "request-upload.any.html": [
          "Fetch with POST with ReadableStream",
          "Fetch with POST with ReadableStream containing String",
          "Fetch with POST with ReadableStream containing null",
          "Fetch with POST with ReadableStream containing number",
          "Fetch with POST with ReadableStream containing ArrayBuffer",
          "Fetch with POST with ReadableStream containing Blob",
          "Fetch with POST with text body on 421 response should be retried once on new connection."
        ],
        "response-url.sub.any.html": true,
        "scheme-about.any.html": true,
        "scheme-blob.sub.any.html": true,
        "scheme-data.any.html": [
          "Fetching [HEAD] data:,response%27s%20body is OK"
        ],
        "scheme-others.sub.any.html": true,
        "stream-response.any.html": true,
        "stream-safe-creation.any.html": [
          "throwing Object.prototype.start accessor should not affect stream creation by 'fetch'",
          "Object.prototype.start accessor returning invalid value should not affect stream creation by 'fetch'",
          "throwing Object.prototype.size accessor should not affect stream creation by 'fetch'",
          "Object.prototype.size accessor returning invalid value should not affect stream creation by 'fetch'",
          "throwing Object.prototype.highWaterMark accessor should not affect stream creation by 'fetch'",
          "Object.prototype.highWaterMark accessor returning invalid value should not affect stream creation by 'fetch'"
        ]
      },
      "response": {
        "json.any.html": true,
        "response-init-001.any.html": true,
        "response-init-002.any.html": true,
        "response-static-error.any.html": true,
        "response-static-redirect.any.html": true,
        "response-stream-disturbed-1.any.html": true,
        "response-stream-disturbed-2.any.html": true,
        "response-stream-disturbed-3.any.html": true,
        "response-stream-disturbed-4.any.html": true,
        "response-stream-disturbed-5.any.html": true,
        "response-stream-disturbed-6.any.html": true,
        "response-stream-disturbed-by-pipe.any.html": true,
        "response-stream-with-broken-then.any.html": [
          "Attempt to inject {done: false, value: bye} via Object.prototype.then.",
          "Attempt to inject value: undefined via Object.prototype.then.",
          "Attempt to inject undefined via Object.prototype.then.",
          "Attempt to inject 8.2 via Object.prototype.then.",
          "intercepting arraybuffer to text conversion via Object.prototype.then should not be possible"
        ],
        "response-error-from-stream.any.html": true,
        "response-error.any.html": true,
        "response-from-stream.any.html": true,
        "response-cancel-stream.any.html": true,
        "response-clone.any.html": [
          "Check response clone use structureClone for teed ReadableStreams (Int8Arraychunk)",
          "Check response clone use structureClone for teed ReadableStreams (Int16Arraychunk)",
          "Check response clone use structureClone for teed ReadableStreams (Int32Arraychunk)",
          "Check response clone use structureClone for teed ReadableStreams (ArrayBufferchunk)",
          "Check response clone use structureClone for teed ReadableStreams (Uint8Arraychunk)",
          "Check response clone use structureClone for teed ReadableStreams (Uint8ClampedArraychunk)",
          "Check response clone use structureClone for teed ReadableStreams (Uint16Arraychunk)",
          "Check response clone use structureClone for teed ReadableStreams (Uint32Arraychunk)",
          "Check response clone use structureClone for teed ReadableStreams (Float32Arraychunk)",
          "Check response clone use structureClone for teed ReadableStreams (Float64Arraychunk)",
          "Check response clone use structureClone for teed ReadableStreams (DataViewchunk)"
        ],
        "response-consume-empty.any.html": [
          "Consume empty FormData response body as text"
        ],
        "response-consume-stream.any.html": true
      },
      "body": {
        "mime-type.any.html": true
      },
      "redirect": {
        "redirect-count.any.html": true,
        "redirect-empty-location.any.html": [
          "redirect response with empty Location, manual mode"
        ],
        "redirect-location.any.html": [
          "Redirect 301 in \"manual\" mode without location",
          "Redirect 301 in \"manual\" mode with invalid location",
          "Redirect 301 in \"manual\" mode with data location",
          "Redirect 302 in \"manual\" mode without location",
          "Redirect 302 in \"manual\" mode with invalid location",
          "Redirect 302 in \"manual\" mode with data location",
          "Redirect 303 in \"manual\" mode without location",
          "Redirect 303 in \"manual\" mode with invalid location",
          "Redirect 303 in \"manual\" mode with data location",
          "Redirect 307 in \"manual\" mode without location",
          "Redirect 307 in \"manual\" mode with invalid location",
          "Redirect 307 in \"manual\" mode with data location",
          "Redirect 308 in \"manual\" mode without location",
          "Redirect 308 in \"manual\" mode with invalid location",
          "Redirect 308 in \"manual\" mode with data location"
        ],
        "redirect-method.any.html": true,
        "redirect-schemes.any.html": true,
        "redirect-to-dataurl.any.html": true
      },
      "idlharness.any.html": [
        "Headers interface: operation append(ByteString, ByteString)",
        "Headers interface: operation delete(ByteString)",
        "Headers interface: operation get(ByteString)",
        "Headers interface: operation has(ByteString)",
        "Headers interface: operation set(ByteString, ByteString)",
        "Headers interface: iterable<ByteString, ByteString>",
        "Request interface: attribute method",
        "Request interface: attribute url",
        "Request interface: attribute headers",
        "Request interface: attribute destination",
        "Request interface: attribute referrer",
        "Request interface: attribute referrerPolicy",
        "Request interface: attribute mode",
        "Request interface: attribute credentials",
        "Request interface: attribute cache",
        "Request interface: attribute redirect",
        "Request interface: attribute integrity",
        "Request interface: attribute keepalive",
        "Request interface: attribute isReloadNavigation",
        "Request interface: attribute isHistoryNavigation",
        "Request interface: attribute signal",
        "Request interface: operation clone()",
        "Request interface: attribute body",
        "Request interface: attribute bodyUsed",
        "Request interface: operation arrayBuffer()",
        "Request interface: operation blob()",
        "Request interface: operation formData()",
        "Request interface: operation json()",
        "Request interface: operation text()",
        "Response interface: operation error()",
        "Response interface: operation redirect(USVString, optional unsigned short)",
        "Response interface: attribute type",
        "Response interface: attribute url",
        "Response interface: attribute redirected",
        "Response interface: attribute status",
        "Response interface: attribute ok",
        "Response interface: attribute statusText",
        "Response interface: attribute headers",
        "Response interface: operation clone()",
        "Response interface: attribute body",
        "Response interface: attribute bodyUsed",
        "Response interface: operation arrayBuffer()",
        "Response interface: operation blob()",
        "Response interface: operation formData()",
        "Response interface: operation json()",
        "Response interface: operation text()",
        "Response interface: calling redirect(USVString, optional unsigned short) on new Response() with too few arguments must throw TypeError",
        "Window interface: operation fetch(RequestInfo, optional RequestInit)"
      ]
    },
    "data-urls": {
      "base64.any.html": true,
      "processing.any.html": [
        "\"data:text/plain;a=\\\",\\\",X\""
      ]
    }
  },
  "FileAPI": {
    "blob": {
      "Blob-array-buffer.any.html": true,
      "Blob-constructor.any.html": [
        "Passing a FrozenArray as the blobParts array should work (FrozenArray<MessagePort>)."
      ],
      "Blob-slice-overflow.any.html": true,
      "Blob-slice.any.html": true,
      "Blob-stream.any.html": true,
      "Blob-text.any.html": true
    },
    "file": {
      "File-constructor.any.html": true
    },
    "fileReader.any.html": true,
    "url": {
      "url-format.any.html": true,
      "url-with-fetch.any.html": [
        "Revoke blob URL after creating Request, will fetch"
      ]
    },
    "reading-data-section": {
      "Determining-Encoding.any.html": true,
      "FileReader-event-handler-attributes.any.html": true,
      "FileReader-multiple-reads.any.html": true,
      "filereader_abort.any.html": true,
      "filereader_error.any.html": true,
      "filereader_events.any.html": false,
      "filereader_readAsArrayBuffer.any.html": true,
      "filereader_readAsBinaryString.any.html": true,
      "filereader_readAsDataURL.any.html": true,
      "filereader_readAsText.any.html": true,
      "filereader_readystate.any.html": true,
      "filereader_result.any.html": [
        "result is null during \"loadstart\" event for readAsText",
        "result is null during \"loadstart\" event for readAsDataURL",
        "result is null during \"loadstart\" event for readAsArrayBuffer",
        "result is null during \"loadstart\" event for readAsBinaryString",
        "result is null during \"progress\" event for readAsText",
        "result is null during \"progress\" event for readAsDataURL",
        "result is null during \"progress\" event for readAsArrayBuffer",
        "result is null during \"progress\" event for readAsBinaryString"
      ]
    }
  },
  "html": {
    "webappapis": {
      "atob": {
        "base64.any.html": true
      },
      "timers": {
        "cleartimeout-clearinterval.any.html": true,
        "missing-timeout-setinterval.any.html": true,
        "negative-setinterval.any.html": true,
        "negative-settimeout.any.html": true,
        "type-long-setinterval.any.html": true,
        "type-long-settimeout.any.html": true
      },
      "microtask-queuing": {
        "queue-microtask-exceptions.any.html": true,
        "queue-microtask.any.html": true
      }
    }
  },
  "webstorage": {
    "defineProperty.window.html": true,
    "set.window.html": true,
    "storage_enumerate.window.html": true,
    "storage_in.window.html": true,
    "event_constructor.window.html": false,
    "event_initstorageevent.window.html": false,
    "missing_arguments.window.html": true,
    "storage_builtins.window.html": true,
    "storage_clear.window.html": true,
    "storage_functions_not_overwritten.window.html": true,
    "storage_getitem.window.html": true,
    "storage_indexing.window.html": true,
    "storage_key.window.html": true,
    "storage_key_empty_string.window.html": true,
    "storage_length.window.html": true,
    "storage_local_setitem_quotaexceedederr.window.html": true,
    "storage_local_window_open.window.html": false,
    "storage_removeitem.window.html": true,
    "storage_session_setitem_quotaexceedederr.window.html": true,
    "storage_session_window_noopener.window.html": false,
    "storage_session_window_open.window.html": false,
    "storage_set_value_enumerate.window.html": true,
    "storage_setitem.window.html": [
      "localStorage[] = \"\ud800\"",
      "localStorage[] = \"\udbff\"",
      "localStorage[] = \"\udc00\"",
      "localStorage[] = \"\udfff\"",
      "localStorage[] = \"\ud83ca\"",
      "localStorage[] = \"a\udf4d\"",
      "sessionStorage[] = \"\ud800\"",
      "sessionStorage[] = \"\udbff\"",
      "sessionStorage[] = \"\udc00\"",
      "sessionStorage[] = \"\udfff\"",
      "sessionStorage[] = \"\ud83ca\"",
      "sessionStorage[] = \"a\udf4d\""
    ],
    "storage_string_conversion.window.html": true,
    "storage_supported_property_names.window.html": true,
    "symbol-props.window.html": [
      "localStorage: defineProperty not configurable",
      "sessionStorage: defineProperty not configurable"
    ]
  },
  "xhr": {
    "formdata": {
      "append.any.html": true,
      "constructor.any.html": true,
      "delete.any.html": true,
      "foreach.any.html": true,
      "get.any.html": true,
      "has.any.html": true,
      "set-blob.any.html": true,
      "set.any.html": true
    }
  }
}