name: ci

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.kind }} ${{ matrix.os }}
    if: |
      github.event_name == 'push' ||
      !startsWith(github.event.pull_request.head.label, 'denoland:')
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      matrix:
        include:
          - os: macos-10.15
            kind: test_release
          - os: windows-2019
            kind: test_release
          - os: ${{ github.repository == 'denoland/deno' && 'ubuntu-latest-xl' || 'ubuntu-18.04' }}
            kind: test_release
          - os: ${{ github.repository == 'denoland/deno' && 'ubuntu-latest-xl' || 'ubuntu-18.04' }}
            kind: test_debug
          - os: ${{ github.repository == 'denoland/deno' && 'ubuntu-latest-xl' || 'ubuntu-18.04' }}
            kind: bench
          - os: ${{ github.repository == 'denoland/deno' && 'ubuntu-latest-xl' || 'ubuntu-18.04' }}
            kind: lint

      # Always run master branch builds to completion. This allows the cache to
      # stay mostly up-to-date in situations where a single job fails due to
      # e.g. a flaky test.
      # Don't fast-fail on tag build because publishing binaries shouldn't be
      # prevented if 'cargo publish' fails (which can be a false negative).
      fail-fast: ${{ github.event_name == 'pull_request' || (github.ref !=
        'refs/heads/master' && !startsWith(github.ref, 'refs/tags/')) }}

    env:
      CARGO_INCREMENTAL: 0
      RUST_BACKTRACE: full

    steps:
      - name: Configure git
        run: git config --global core.symlinks true

      - name: Clone repository
        uses: actions/checkout@v2
        with:
          # Use depth > 1, because sometimes we need to rebuild master and if
          # other commits have landed it will become impossible to rebuild if
          # the checkout is too shallow.
          fetch-depth: 5
          submodules: true

      - name: Create source tarballs (release, linux)
        if: |
          startsWith(matrix.os, 'ubuntu') &&
          matrix.kind == 'test_release' &&
          github.repository == 'denoland/deno' &&
          startsWith(github.ref, 'refs/tags/') &&
          !startsWith(github.ref, 'refs/tags/std/')
        run: |
          mkdir -p target/release
          tar --exclude=.cargo_home --exclude=".git*" --exclude=target --exclude=third_party/node_modules --exclude=third_party/python_packages --exclude=third_party/prebuilt -czvf target/release/deno_src.tar.gz -C .. deno

      - name: Install rust
        uses: hecrj/setup-rust-action@v1
        with:
          rust-version: 1.47.0

      - name: Install clippy and rustfmt
        if: matrix.kind == 'lint'
        run: |
          rustup component add clippy
          rustup component add rustfmt

      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: "2.7"
          architecture: x64

      - name: Remove unused versions of Python
        if: startsWith(matrix.os, 'windows')
        run: |-
          $env:PATH -split ";" |
            Where-Object { Test-Path "$_\python.exe" } |
            Select-Object -Skip 1 |
            ForEach-Object { Move-Item "$_" "$_.disabled" }

      - name: Log versions
        run: |
          node -v
          python --version
          rustc --version
          cargo --version

      - name: Configure cargo data directory
        # After this point, all cargo registry and crate data is stored in
        # $GITHUB_WORKSPACE/.cargo_home. This allows us to cache only the files
        # that are needed during the build process. Additionally, this works
        # around a bug in the 'cache' action that causes directories outside of
        # the workspace dir to be saved/restored incorrectly.
        run: echo "::set-env name=CARGO_HOME::$(pwd)/.cargo_home"

      - name: Cache
        uses: actions/cache@v2
        with:
          # Note: crates from the denoland/deno git repo always get rebuilt,
          # and their outputs ('deno', 'libdeno.rlib' etc.) are quite big,
          # so we cache only those subdirectories of target/{debug|release} that
          # contain the build output for crates that come from the registry.
          path: |-
            .cargo_home
            target/*/.*
            target/*/build
            target/*/deps
            target/*/gn_out
          key: deno-${{ matrix.os }}-${{ matrix.kind }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            deno-${{ matrix.os }}-${{ matrix.kind }}-

        # It seems that the 'target' directory does not always get restored
        # from cache correctly on MacOS. In the build log we see the following:
        #
        #   Fresh serde_derive v1.0.115
        #
        # But a little while after that Cargo aborts because 'serde_derive' is
        # now nowhere to be found. We're not the only ones experiencing this,
        # see https://github.com/actions-rs/cargo/issues/111.
        #
        #   error[E0463]: can't find crate for `serde_derive`
        #   ##[error]   --> /Users/runner/.cargo/registry/src/github.com-
        #       |           1ecc6299db9ec823/serde-1.0.115/src/lib.rs:285:1
        #       |
        #   285 | extern crate serde_derive;
        #       | ^^^^^^^^^^^^^^^^^^^^^^^^^^ can't find crate
      - name: Work around MacOS + Cargo + Github Actions cache bug
        if: runner.os == 'macOS'
        run: |
          cargo clean --locked --release \
                      -p ast_node \
                      -p is-macro \
                      -p serde_derive \
                      -p swc_ecma_codegen \
                      -p swc_ecma_codegen_macros \
                      -p swc_ecma_parser \
                      -p swc_ecma_parser_macros \
                      -p swc_visit \
                      -p swc_visit_macros

      - name: lint.py
        if: matrix.kind == 'lint'
        run: python ./tools/lint.py

      - name: test_format.py
        if: matrix.kind == 'lint'
        run: python ./tools/test_format.py

      - name: Build release
        if: |
          matrix.kind == 'test_release' ||
          matrix.kind == 'bench'
        run: cargo build --release --locked --all-targets -vv

      - name: Build debug
        if: matrix.kind == 'test_debug'
        run: cargo build --locked --all-targets

      - name: Test release
        if: matrix.kind == 'test_release'
        run: cargo test --release --locked --all-targets

      - name: Test debug
        if: matrix.kind == 'test_debug'
        run: cargo test --locked --all-targets

      - name: Run Benchmarks
        if: matrix.kind == 'bench'
        run: cargo bench

      - name: Post Benchmarks
        if: |
          matrix.kind == 'bench' &&
          github.repository == 'denoland/deno' &&
          github.ref == 'refs/heads/master'
        env:
          DENOBOT_PAT: ${{ secrets.DENOBOT_PAT }}
        run: |
          git clone --depth 1 -b gh-pages https://${DENOBOT_PAT}@github.com/denoland/benchmark_data.git gh-pages
          python ./tools/build_benchmark_jsons.py --release
          cd gh-pages
          git config user.email "propelml@gmail.com"
          git config user.name "denobot"
          git add .
          git commit --message "Update benchmarks"
          git push origin gh-pages

      - name: Worker info
        if: matrix.kind == 'bench'
        run: |
          cat /proc/cpuinfo
          cat /proc/meminfo

      - name: Pre-release (linux)
        if: |
          startsWith(matrix.os, 'ubuntu') &&
          matrix.kind == 'test_release'
        run: |
          cd target/release
          zip -r deno-x86_64-unknown-linux-gnu.zip deno
          ./deno types > lib.deno.d.ts

      - name: Pre-release (mac)
        if: |
          startsWith(matrix.os, 'macOS') &&
          matrix.kind == 'test_release'
        run: |
          cd target/release
          zip -r deno-x86_64-apple-darwin.zip deno

      - name: Pre-release (windows)
        if: |
          startsWith(matrix.os, 'windows') &&
          matrix.kind == 'test_release'
        run: |
          Compress-Archive -CompressionLevel Optimal -Force -Path target/release/deno.exe -DestinationPath target/release/deno-x86_64-pc-windows-msvc.zip

      - name: Release
        uses: softprops/action-gh-release@v1
        if: |
          matrix.kind == 'test_release' &&
          github.repository == 'denoland/deno' &&
          startsWith(github.ref, 'refs/tags/') &&
          !startsWith(github.ref, 'refs/tags/std/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            target/release/deno-x86_64-pc-windows-msvc.zip
            target/release/deno-x86_64-unknown-linux-gnu.zip
            target/release/deno-x86_64-apple-darwin.zip
            target/release/deno_src.tar.gz
            target/release/lib.deno.d.ts
          draft: true

      - name: Publish
        if: |
          startsWith(matrix.os, 'ubuntu') &&
          matrix.kind == 'test_release' &&
          github.repository == 'denoland/deno' &&
          startsWith(github.ref, 'refs/tags/') &&
          !startsWith(github.ref, 'refs/tags/std/')
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          cd core
          cargo publish
          sleep 30
          cd ../op_crates/web
          cargo publish
          sleep 30
          cd ../fetch
          cargo publish
          sleep 30
          cd ../../cli
          sleep 30
          cargo publish
