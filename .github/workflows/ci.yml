name: ci

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.kind }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      matrix:
        os: [macOS-latest, ubuntu-16.04, windows-2019]
        kind: ['test_release', 'test_debug', 'bench', 'lint']
        exclude:
          - os: windows-2019
            kind: 'bench'
          - os: macOS-latest
            kind: 'bench'

          - os: windows-2019
            kind: 'lint'
          - os: macOS-latest
            kind: 'lint'

          - os: windows-2019
            kind: 'test_debug'
          - os: macOS-latest
            kind: 'test_debug'

      # Always run master branch builds to completion. This allows the cache to
      # stay mostly up-to-date in situations where a single job fails due to
      # e.g. a flaky test.
      fail-fast:
        ${{ github.event_name != 'push' || github.ref != 'refs/heads/master' }}

    env:
      CARGO_INCREMENTAL: 0
      RUST_BACKTRACE: full
      V8_BINARY: true

    steps:
      - name: Configure git
        run: git config --global core.symlinks true

      - name: Clone repository
        uses: actions/checkout@v1
        with:
          # Use depth > 1, because sometimes we need to rebuild master and if
          # other commits have landed it will become impossible to rebuild if
          # the checkout is too shallow.
          fetch-depth: 5
          submodules: true

      - name: Create source tarballs (release, linux)
        if: startsWith(matrix.os, 'ubuntu') && matrix.kind == 'test_release' && startsWith(github.ref, 'refs/tags/') && github.repository == 'denoland/deno'
        run: |
          mkdir -p target/release
          tar --exclude=.cargo --exclude=".git*" --exclude=target --exclude=deno_typescript/typescript/tests --exclude=third_party/cpplint --exclude=third_party/node_modules --exclude=third_party/python_packages --exclude=third_party/prebuilt -czvf target/release/deno_src.tar.gz -C .. deno

      - name: Install rust
        uses: hecrj/setup-rust-action@v1
        with:
          rust-version: "1.42.0"

      - name: Install clippy and rustfmt
        if: matrix.kind == 'lint'
        run: |
          rustup component add clippy
          rustup component add rustfmt

      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: "2.7"
          architecture: x64

      - name: Remove unused versions of Python
        if: startsWith(matrix.os, 'windows')
        run: |-
          $env:PATH -split ";" |
            Where-Object { Test-Path "$_\python.exe" } |
            Select-Object -Skip 1 |
            ForEach-Object { Move-Item "$_" "$_.disabled" }

      - name: Log versions
        run: |
          node -v
          python --version
          rustc --version
          cargo --version

      - name: Configure cargo data directory
        # After this point, all cargo registry and crate data is stored in
        # $GITHUB_WORKSPACE/.cargo. This allows us to cache only the files that
        # are needed during the build process. Additionally, this works around
        # a bug in the 'cache' action that causes directories outside of the
        # workspace dir to be saved/restored incorrectly.
        run: echo "::set-env name=CARGO_HOME::$(pwd)/.cargo"

      - name: Cache
        uses: actions/cache@master
        with:
          # Note: crates from the denoland/deno git repo always get rebuilt,
          # and their outputs ('deno', 'libdeno.rlib' etc.) are quite big,
          # so we cache only those subdirectories of target/{debug|release} that
          # contain the build output for crates that come from the registry.
          path: |-
            .cargo
            target/*/.*
            target/*/build
            target/*/deps
            target/*/gn_out
          key:
            ${{ matrix.os }}-${{ matrix.kind }}-${{ hashFiles('Cargo.lock') }}

      - name: lint.py
        if: matrix.kind == 'lint'
        run: python ./tools/lint.py

      - name: test_format.py
        if: matrix.kind == 'lint'
        run: python ./tools/test_format.py

      - name: Build release
        if: matrix.kind == 'test_release' || matrix.kind == 'bench'
        run: cargo build --release --locked --all-targets

      - name: Build debug
        if: matrix.kind == 'test_debug'
        run: cargo build --locked --all-targets

      - name: Test release
        if: matrix.kind == 'test_release'
        run: cargo test --release --locked --all-targets

      - name: Test debug
        if: matrix.kind == 'test_debug'
        run: cargo test --locked --all-targets

      - name: Run Benchmarks
        if: matrix.kind == 'bench'
        run: python ./tools/benchmark.py --release

      - name: Post Benchmarks
        if: matrix.kind == 'bench' && github.ref == 'refs/heads/master' && github.repository == 'denoland/deno'
        env:
          DENOBOT_PAT: ${{ secrets.DENOBOT_PAT }}
        run: |
          git clone --depth 1 -b gh-pages https://${DENOBOT_PAT}@github.com/denoland/benchmark_data.git gh-pages
          python ./tools/build_benchmark_jsons.py --release
          cd gh-pages
          git config user.email "propelml@gmail.com"
          git config user.name "denobot"
          git add .
          git commit --message "Update benchmarks"
          git push origin gh-pages

      - name: Worker info
        if: matrix.kind == 'bench'
        run: |
          cat /proc/cpuinfo
          cat /proc/meminfo

      - name: Pre-release (linux)
        if: startsWith(matrix.os, 'ubuntu') && matrix.kind == 'test_release'
        run: gzip -f -S _linux_x64.gz target/release/deno

      - name: Pre-release (mac)
        if: startsWith(matrix.os, 'macOS') && matrix.kind == 'test_release'
        run: gzip -f -S _osx_x64.gz target/release/deno

      - name: Pre-release (windows)
        if: startsWith(matrix.os, 'windows') && matrix.kind == 'test_release'
        run: Compress-Archive -CompressionLevel Optimal -Force -Path target/release/deno.exe -DestinationPath target/release/deno_win_x64.zip

      - name: Release
        uses: softprops/action-gh-release@v1
        if: matrix.kind == 'test_release' && startsWith(github.ref, 'refs/tags/') && github.repository == 'denoland/deno'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            target/release/deno_win_x64.zip
            target/release/deno_linux_x64.gz
            target/release/deno_osx_x64.gz
            target/release/deno_src.tar.gz
          draft: true

      - name: Publish
        if: >
          startsWith(github.ref, 'refs/tags/') &&
          github.repository == 'denoland/deno' &&
          matrix.kind == 'test_release' &&
          startsWith(matrix.os, 'ubuntu')
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          cd core
          cargo publish
          cd ../deno_typescript
          sleep 30
          cargo publish
          cd ../cli
          sleep 30
          cargo publish
