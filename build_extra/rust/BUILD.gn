# Copyright 2018-2019 the Deno authors. All rights reserved. MIT license.

# Dependencies between third party crates is mapped out here manually.  This is
# not so difficult and having it be tedious to add dependencies might help us
# avoid dependency hell later on. Always try to minimize dependencies.
# Versioning for third party rust crates is controlled in //Cargo.toml
# Use //tools/sync_third_party.py instead of running "cargo install".

import("rust.gni")

cargo_home = "//third_party/rust_crates"

rust_rlib("aho_corasick") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/aho-corasick-0.7.6/src/lib.rs"
  features = [
    "default",
    "std",
  ]
  extern_rlib = [ "memchr" ]
}

rust_rlib("ansi_term") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ansi_term-0.12.0/src/lib.rs"
  if (is_win) {
    extern_rlib = [ "winapi" ]
  }
}

rust_rlib("arrayvec") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/arrayvec-0.4.11/src/lib.rs"
  extern_rlib = [ "nodrop" ]

  # Added by custom-build script.
  cfg = [ "has_stable_maybe_uninit" ]
}

rust_rlib("atty") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/atty-0.2.13/src/lib.rs"
  if (is_posix) {
    extern_rlib = [ "libc" ]
  }
  if (is_win) {
    extern_rlib = [ "winapi" ]
  }
}

rust_rlib("base64") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/base64-0.10.1/src/lib.rs"
  extern_rlib = [ "byteorder" ]
}

rust_rlib("bitflags") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/bitflags-1.1.0/src/lib.rs"
  features = [ "default" ]

  # Added by custom-build script.
  cfg = [ "bitflags_const_fn" ]
}

rust_rlib("byteorder") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.2/src/lib.rs"
  features = [
    "default",
    "std",
  ]

  # Added by custom-build script.
  cfg = [ "byteorder_i128" ]
}

rust_rlib("bytes") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/bytes-0.4.12/src/lib.rs"
  features = [ "either" ]
  extern_rlib = [
    "byteorder",
    "either",
    "iovec",
  ]
}

## Override: use rand v0.6.5 instead.
# rust_rlib("c2_chacha") {
#   cap_lints = "allow"
#   source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/c2-chacha-0.2.2/src/lib.rs"
#   features = [
#     "lazy_static",
#     "simd",
#     "std",
#   ]
#   extern_rlib = [
#     "lazy_static",
#     "ppv_lite86",
#   ]
# }

rust_rlib("cfg_if") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/cfg-if-0.1.9/src/lib.rs"
}

rust_rlib("clap") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/clap-2.33.0/src/lib.rs"
  features = [
    "ansi_term",
    "atty",
    "color",
    "default",
    "strsim",
    "suggestions",
    "vec_map",
  ]
  extern_rlib = [
    "atty",
    "bitflags",
    "strsim",
    "textwrap",
    "unicode_width",
    "vec_map",
  ]

  # Override: use ansi_term v0.12.0 instead of v0.11.0.
  if (is_posix) {
    extern_rlib += [ "ansi_term" ]
    # extern = [
    #   {
    #     label = ":ansi_term-0.11.0"
    #     crate_type = "rlib"
    #     crate_name = "ansi_term"
    #     crate_version = "0.11.0"
    #   },
    # ]
  }
}

rust_rlib("crossbeam_deque") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/crossbeam-deque-0.7.1/src/lib.rs"
  extern_rlib = [
    "crossbeam_epoch",
    "crossbeam_utils",
  ]
}

rust_rlib("crossbeam_epoch") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/crossbeam-epoch-0.7.2/src/lib.rs"
  features = [
    "default",
    "lazy_static",
    "std",
  ]
  extern_rlib = [
    "arrayvec",
    "cfg_if",
    "crossbeam_utils",
    "lazy_static",
    "memoffset",
    "scopeguard",
  ]
}

rust_rlib("crossbeam_queue") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/crossbeam-queue-0.1.2/src/lib.rs"
  extern_rlib = [ "crossbeam_utils" ]
}

rust_rlib("crossbeam_utils") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/crossbeam-utils-0.6.6/src/lib.rs"
  features = [
    "default",
    "lazy_static",
    "std",
  ]
  extern_rlib = [
    "cfg_if",
    "lazy_static",
  ]
}

rust_rlib("ct_logs") {
  cap_lints = "allow"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ct-logs-0.5.1/src/lib.rs"
  extern_rlib = [ "sct" ]
}

rust_rlib("dirs") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/dirs-2.0.2/src/lib.rs"
  extern_rlib = [
    "cfg_if",
    "dirs_sys",
  ]
}

rust_rlib("dirs_sys") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/dirs-sys-0.3.4/src/lib.rs"
  extern_rlib = [ "cfg_if" ]
  if (is_posix) {
    extern_rlib += [ "libc" ]
  }
  if (is_win) {
    extern_rlib += [ "winapi" ]
  }
}

rust_rlib("either") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/either-1.5.2/src/lib.rs"
  features = [
    "default",
    "use_std",
  ]
}

rust_rlib("fnv") {
  cap_lints = "allow"
  edition = "2015"
  source_root =
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/fnv-1.0.6/lib.rs"
}

rust_rlib("futures") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/futures-0.1.28/src/lib.rs"
  features = [
    "default",
    "use_std",
    "with-deprecated",
  ]
}

rust_rlib("futures_cpupool") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/futures-cpupool-0.1.8/src/lib.rs"
  features = [
    "default",
    "with-deprecated",
  ]
  extern_rlib = [
    "futures",
    "num_cpus",
  ]
}

## Override: use rand v0.6.5 instead.
# rust_rlib("getrandom") {
#   cap_lints = "allow"
#   source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/getrandom-0.1.10/src/lib.rs"
#   features = [ "std" ]
#   extern_rlib = [ "cfg_if" ]
#   if (is_posix) {
#     extern_rlib += [ "libc" ]
#   }
#
#   # Per the #[link(...)] attribute found in 'src/ios.rs'.
#   if (is_mac) {
#     libs = [ "Security.framework" ]
#   }
#
#   # Added by custom-build script.
#   if (is_win) {
#     libs = [ "advapi32.lib" ]
#   }
# }

rust_rlib("h2") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/h2-0.1.26/src/lib.rs"
  extern_rlib = [
    "byteorder",
    "bytes",
    "fnv",
    "futures",
    "http",
    "indexmap",
    "log",
    "slab",
    "string",
    "tokio_io",
  ]
}

rust_rlib("http") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/http-0.1.18/src/lib.rs"
  extern_rlib = [
    "bytes",
    "fnv",
    "itoa",
  ]
}

rust_rlib("http_body") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/http-body-0.1.0/src/lib.rs"
  extern_rlib = [
    "bytes",
    "futures",
    "http",
    "tokio_buf",
  ]
}

rust_rlib("httparse") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/httparse-1.3.4/src/lib.rs"
  features = [
    "default",
    "std",
  ]

  # Added by custom-build script.
  cfg = [
    "httparse_min_2018",
    "httparse_simd",
  ]
}

rust_rlib("hyper") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/hyper-0.12.33/src/lib.rs"
  features = [
    "__internal_flaky_tests",
    "default",
    "futures-cpupool",
    "net2",
    "runtime",
    "tokio",
    "tokio-executor",
    "tokio-reactor",
    "tokio-tcp",
    "tokio-threadpool",
    "tokio-timer",
  ]
  extern_rlib = [
    "bytes",
    "futures",
    "futures_cpupool",
    "h2",
    "http",
    "http_body",
    "httparse",
    "iovec",
    "itoa",
    "log",
    "net2",
    "time",
    "tokio",
    "tokio_buf",
    "tokio_executor",
    "tokio_io",
    "tokio_reactor",
    "tokio_tcp",
    "tokio_threadpool",
    "tokio_timer",
    "want",
  ]

  # Added by custom-build script.
  cfg = [
    "error_source",
    "try_from",
  ]
}

rust_rlib("hyper_rustls") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/hyper-rustls-0.16.1/src/lib.rs"
  features = [
    "ct-logs",
    "default",
    "tokio-runtime",
    "webpki-roots",
  ]
  extern_rlib = [
    "bytes",
    "ct_logs",
    "futures",
    "hyper",
    "rustls",
    "tokio_io",
    "tokio_rustls",
    "webpki",
    "webpki_roots",
  ]
}

rust_rlib("idna") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/idna-0.2.0/src/lib.rs"
  extern_rlib = [
    "matches",
    "unicode_bidi",
    "unicode_normalization",
  ]
}

rust_rlib("indexmap") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/indexmap-1.1.0/src/lib.rs"
}

rust_rlib("integer_atomics") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/integer-atomics-1.0.2/src/lib.rs"
}

rust_rlib("iovec") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/iovec-0.1.2/src/lib.rs"
  if (is_posix) {
    extern_rlib = [ "libc" ]
  }
  if (is_win) {
    extern = [
      {
        label = ":winapi-0.2.8"
        crate_type = "rlib"
        crate_name = "winapi"
        crate_version = "0.2.8"
      },
    ]
  }
}

rust_rlib("itoa") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/itoa-0.4.4/src/lib.rs"
  features = [
    "default",
    "std",
  ]
}

rust_rlib("lazy_static") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.3.0/src/lib.rs"
}

rust_rlib("libc") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/libc-0.2.62/src/lib.rs"
  features = [
    "default",
    "std",
  ]

  # Added by custom-build script.
  cfg = [
    "freebsd11",
    "libc_align",
    "libc_const_size_of",
    "libc_core_cvoid",
    "libc_packedN",
    "libc_priv_mod_use",
    "libc_union",
  ]
}

rust_rlib("lock_api") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs"
  extern_rlib = [
    # Override: use scopeguard v1.0.0 instead of v0.3.3.
    "scopeguard",
    ## Override: avoid dependency on on 'owning_ref'.
    # "owning_ref",
  ]

  ## Override: avoid dependency on on 'owning_ref'.
  # features = [ "owning_ref" ]

  ## Override: use scopeguard v1.0.0 instead of v0.3.3.
  # extern = [
  #   {
  #     label = ":scopeguard-0.3.3"
  #     crate_type = "rlib"
  #     crate_name = "scopeguard"
  #     crate_version = "0.3.3"
  #   },
  # ]
}

rust_rlib("log") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/log-0.4.8/src/lib.rs"
  extern_rlib = [ "cfg_if" ]

  # Added by custom-build script.
  cfg = [ "atomic_cas" ]
}

rust_rlib("matches") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/matches-0.1.8/lib.rs"
}

rust_rlib("memchr") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/memchr-2.2.1/src/lib.rs"
  features = [
    "default",
    "use_std",
  ]

  # Added by custom-build script.
  cfg = [
    "memchr_runtime_avx",
    "memchr_runtime_simd",
    "memchr_runtime_sse2",
    "memchr_runtime_sse42",
  ]
}

rust_rlib("memoffset") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/memoffset-0.5.1/src/lib.rs"

  # Added by custom-build script.
  cfg = [ "memoffset_maybe_uninit" ]
}

rust_rlib("mio") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/mio-0.6.19/src/lib.rs"
  features = [
    "default",
    "with-deprecated",
  ]
  extern_rlib = [
    "iovec",
    "log",
    "net2",
    "slab",
  ]
  if (is_posix) {
    extern_rlib += [ "libc" ]
  }
  if (is_win) {
    extern_rlib += [ "kernel32" ]
    extern = [
      {
        label = ":miow-0.2.1"
        crate_type = "rlib"
        crate_name = "miow"
        crate_version = "0.2.1"
      },
      {
        label = ":winapi-0.2.8"
        crate_type = "rlib"
        crate_name = "winapi"
        crate_version = "0.2.8"
      },
    ]
  }
}

rust_rlib("net2") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/net2-0.2.33/src/lib.rs"
  features = [
    "default",
    "duration",
  ]
  extern_rlib = [ "cfg_if" ]
  if (is_posix) {
    extern_rlib += [ "libc" ]
  }
  if (is_win) {
    extern_rlib += [ "winapi" ]
  }
}

rust_rlib("nodrop") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/nodrop-0.1.13/src/lib.rs"
}

rust_rlib("num_cpus") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/num_cpus-1.10.1/src/lib.rs"
  extern_rlib = [ "libc" ]
}

## Override: avoid dependency on on 'owning_ref'.
# rust_rlib("owning_ref") {
#   cap_lints = "allow"
#   edition = "2015"
#   source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs"
#   extern_rlib = [ "stable_deref_trait" ]
# }

rust_rlib("parking_lot") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.7.1/src/lib.rs"
  features = [
    "default",
    ## Override: avoid dependency on on 'owning_ref'.
    # "owning_ref",
  ]
  extern_rlib = [
    "lock_api",
    "parking_lot_core",
  ]
}

rust_rlib("parking_lot_core") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/parking_lot_core-0.4.0/src/lib.rs"
  extern_rlib = [
    "rand",
    "smallvec",
  ]

  # Added by custom-build script.
  cfg = [ "has_localkey_try_with" ]
  if (is_posix) {
    extern_rlib += [ "libc" ]
  }
  if (is_win) {
    extern_rlib += [ "winapi" ]
  }
}

rust_rlib("percent_encoding") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/percent-encoding-2.1.0/lib.rs"
}

## Override: use rand v0.6.5 instead.
# rust_rlib("ppv_lite86") {
#   cap_lints = "allow"
#   source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ppv-lite86-0.2.5/src/lib.rs"
#   features = [
#     "default",
#     "simd",
#     "std",
#   ]
# }

rust_rlib("proc_macro2") {
  cap_lints = "allow"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/proc-macro2-1.0.1/src/lib.rs"
  features = [
    "default",
    "proc-macro",
  ]
  extern_rlib = [ "unicode_xid" ]

  # Added by custom-build script.
  cfg = [
    "use_proc_macro",
    "wrap_proc_macro",
  ]
}

rust_rlib("quote") {
  cap_lints = "allow"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/quote-1.0.2/src/lib.rs"
  features = [
    "default",
    "proc-macro",
  ]
  extern_rlib = [ "proc_macro2" ]
}

rust_rlib("rand") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/rand-0.6.5/src/lib.rs"
  features = [
    "alloc",
    "default",
    "rand_os",
    "std",
  ]
  extern_rlib = [
    "rand_hc",
    "rand_isaac",
    "rand_jitter",
    "rand_os",
    "rand_pcg",
    "rand_xorshift",
  ]
  extern = [
    {
      label = ":rand_chacha-0.1.1"
      crate_type = "rlib"
      crate_name = "rand_chacha"
      crate_version = "0.1.1"
    },
    {
      label = ":rand_core-0.4.2"
      crate_type = "rlib"
      crate_name = "rand_core"
      crate_version = "0.4.2"
    },
  ]

  # Added by custom-build script.
  cfg = [
    "rustc_1_25",
    "rustc_1_26",
    "rustc_1_27",
  ]
  if (is_posix) {
    extern_rlib += [ "libc" ]
  }
  if (is_win) {
    extern_rlib += [ "winapi" ]
  }
}

## Override: use rand v0.6.5 instead.
# rust_rlib("rand_chacha") {
#   cap_lints = "allow"
#   source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/rand_chacha-0.2.1/src/lib.rs"
#   features = [
#     "default",
#     "simd",
#     "std",
#   ]
#   extern_rlib = [
#     "c2_chacha",
#     "rand_core",
#   ]
# }

## Override: use rand v0.6.5 instead.
# rust_rlib("rand_core") {
#   cap_lints = "allow"
#   edition = "2015"
#   source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs"
#   features = [
#     "alloc",
#     "getrandom",
#     "std",
#   ]
#   extern_rlib = [ "getrandom" ]
# }

rust_rlib("rand_hc") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/rand_hc-0.1.0/src/lib.rs"

  # Override: use rand_core v0.4.2 instead of v0.3.1.
  extern = [
    {
      label = ":rand_core-0.4.2"
      crate_type = "rlib"
      crate_name = "rand_core"
      crate_version = "0.4.2"
    },
    # {
    #   label = ":rand_core-0.3.1"
    #   crate_type = "rlib"
    #   crate_name = "rand_core"
    #   crate_version = "0.3.1"
    # },
  ]
}

rust_rlib("rand_isaac") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/rand_isaac-0.1.1/src/lib.rs"

  # Override: use rand_core v0.4.2 instead of v0.3.1.
  extern = [
    {
      label = ":rand_core-0.4.2"
      crate_type = "rlib"
      crate_name = "rand_core"
      crate_version = "0.4.2"
    },
    # {
    #   label = ":rand_core-0.3.1"
    #   crate_type = "rlib"
    #   crate_name = "rand_core"
    #   crate_version = "0.3.1"
    # },
  ]
}

rust_rlib("rand_jitter") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/rand_jitter-0.1.4/src/lib.rs"
  features = [ "std" ]
  extern = [
    {
      label = ":rand_core-0.4.2"
      crate_type = "rlib"
      crate_name = "rand_core"
      crate_version = "0.4.2"
    },
  ]
  if (is_mac) {
    extern_rlib = [ "libc" ]
  }
  if (is_win) {
    extern_rlib = [ "winapi" ]
  }
}

rust_rlib("rand_os") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/rand_os-0.1.3/src/lib.rs"
  extern = [
    {
      label = ":rand_core-0.4.2"
      crate_type = "rlib"
      crate_name = "rand_core"
      crate_version = "0.4.2"
    },
  ]
  if (is_posix) {
    extern_rlib = [ "libc" ]
  }

  # Per the #[link(...)] attribute found in 'src/macos.rs'.
  if (is_mac) {
    libs = [ "Security.framework" ]
  }
  if (is_win) {
    extern_rlib = [ "winapi" ]
  }
}

rust_rlib("rand_pcg") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/rand_pcg-0.1.2/src/lib.rs"
  extern = [
    {
      label = ":rand_core-0.4.2"
      crate_type = "rlib"
      crate_name = "rand_core"
      crate_version = "0.4.2"
    },
  ]

  # Added by custom-build script.
  cfg = [ "rustc_1_26" ]
}

rust_rlib("rand_xorshift") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/rand_xorshift-0.1.1/src/lib.rs"

  # Override: use rand_core v0.4.2 instead of v0.3.1.
  extern = [
    {
      label = ":rand_core-0.4.2"
      crate_type = "rlib"
      crate_name = "rand_core"
      crate_version = "0.4.2"
    },
    # {
    #   label = ":rand_core-0.3.1"
    #   crate_type = "rlib"
    #   crate_name = "rand_core"
    #   crate_version = "0.3.1"
    # },
  ]
}

rust_rlib("regex") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/regex-1.2.1/src/lib.rs"
  features = [
    "default",
    "use_std",
  ]
  extern_rlib = [
    "aho_corasick",
    "memchr",
    "regex_syntax",
    "thread_local",
  ]
}

rust_rlib("regex_syntax") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.11/src/lib.rs"
}

rust_rlib("remove_dir_all") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/remove_dir_all-0.5.2/src/lib.rs"
  if (is_win) {
    extern_rlib = [ "winapi" ]
  }
}

rust_rlib("ring") {
  cap_lints = "allow"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/lib.rs"
  features = [
    "default",
    "dev_urandom_fallback",
    "use_heap",
  ]
  deps = [
    ":ring-core",
    ## Override: don't build 'ring-test' static library.
    # ":ring-test",
  ]
  extern_rlib = [
    "libc",
    "spin",
    "untrusted",
  ]
  if (is_linux) {
    extern_rlib += [ "lazy_static" ]
  }

  # Per the #[link(...)] attribute found in 'src/rand.rs'.
  if (is_mac) {
    libs = [ "Security.framework" ]
  }
  if (is_win) {
    extern_rlib += [ "winapi" ]
  }
}

static_library("ring-core") {
  include_dirs = [
    "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/include",
  ]
  sources = [
    "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/crypto/block.c",
    "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/crypto/cpu-intel.c",
    "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/crypto/crypto.c",
    "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/crypto/fipsmodule/bn/generic.c",
    "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/crypto/fipsmodule/bn/montgomery.c",
    "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/crypto/fipsmodule/bn/montgomery_inv.c",
    "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/crypto/fipsmodule/ec/ecp_nistz.c",
    "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/crypto/fipsmodule/ec/ecp_nistz256.c",
    "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/crypto/fipsmodule/ec/gfp_p256.c",
    "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/crypto/fipsmodule/ec/gfp_p384.c",
    "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/crypto/fipsmodule/modes/gcm.c",
    "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/crypto/limbs/limbs.c",
    "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/crypto/mem.c",
    "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/third_party/fiat/curve25519.c",
  ]
  if (is_linux) {
    sources += [
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/pregenerated/aes-x86_64-elf.S",
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/pregenerated/aesni-gcm-x86_64-elf.S",
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/pregenerated/aesni-x86_64-elf.S",
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/pregenerated/chacha-x86_64-elf.S",
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/pregenerated/ghash-x86_64-elf.S",
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/pregenerated/p256-x86_64-asm-elf.S",
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/pregenerated/poly1305-x86_64-elf.S",
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/pregenerated/sha256-x86_64-elf.S",
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/pregenerated/sha512-x86_64-elf.S",
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/pregenerated/vpaes-x86_64-elf.S",
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/pregenerated/x86_64-mont-elf.S",
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/pregenerated/x86_64-mont5-elf.S",
    ]

    # Supress "warning: '_GNU_SOURCE' macro redefined."
    cflags = [ "-Wno-macro-redefined" ]
  }
  if (is_mac) {
    sources += [
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/pregenerated/aes-x86_64-macosx.S",
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/pregenerated/aesni-gcm-x86_64-macosx.S",
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/pregenerated/aesni-x86_64-macosx.S",
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/pregenerated/chacha-x86_64-macosx.S",
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/pregenerated/ghash-x86_64-macosx.S",
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/pregenerated/p256-x86_64-asm-macosx.S",
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/pregenerated/poly1305-x86_64-macosx.S",
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/pregenerated/sha256-x86_64-macosx.S",
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/pregenerated/sha512-x86_64-macosx.S",
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/pregenerated/vpaes-x86_64-macosx.S",
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/pregenerated/x86_64-mont-macosx.S",
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/pregenerated/x86_64-mont5-macosx.S",
    ]
  }
  if (is_win) {
    libs = [
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/pregenerated/aes-x86_64-nasm.obj",
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/pregenerated/aesni-gcm-x86_64-nasm.obj",
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/pregenerated/aesni-x86_64-nasm.obj",
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/pregenerated/chacha-x86_64-nasm.obj",
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/pregenerated/ghash-x86_64-nasm.obj",
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/pregenerated/p256-x86_64-asm-nasm.obj",
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/pregenerated/poly1305-x86_64-nasm.obj",
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/pregenerated/sha256-x86_64-nasm.obj",
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/pregenerated/sha512-x86_64-nasm.obj",
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/pregenerated/vpaes-x86_64-nasm.obj",
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/pregenerated/x86_64-mont-nasm.obj",
      "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/pregenerated/x86_64-mont5-nasm.obj",
    ]

    # Suppress "warning: '_addcarry_u64' is not a recognized builtin."
    cflags = [ "-Wno-ignored-pragma-intrinsic" ]
  }
}

## Override: don't build 'ring-test' static library.
# static_library("ring-test") {
#   include_dirs = [ "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/include" ]
#   sources = [ "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/crypto/constant_time_test.c" ]
# }

rust_rlib("rustls") {
  cap_lints = "allow"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/rustls-0.15.2/src/lib.rs"
  features = [
    "default",
    "log",
    "logging",
  ]
  extern_rlib = [
    "base64",
    "log",
    "ring",
    "sct",
    "untrusted",
    "webpki",
  ]
}

rust_rlib("rustyline") {
  cap_lints = "allow"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/rustyline-5.0.2/src/lib.rs"
  features = [
    "default",
    "dirs",
    "with-dirs",
  ]
  extern_rlib = [
    "dirs",
    "libc",
    "log",
    "memchr",
    "unicode_segmentation",
    "unicode_width",
  ]
  if (is_posix) {
    extern_rlib += [
      "nix",
      "utf8parse",
    ]
  }
  if (is_win) {
    extern_rlib += [ "winapi" ]
  }
}

rust_rlib("ryu") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ryu-1.0.0/src/lib.rs"

  # Added by custom-build script.
  cfg = [
    "integer128",
    "must_use_return",
  ]
}

rust_rlib("scopeguard") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/scopeguard-1.0.0/src/lib.rs"
}

rust_rlib("sct") {
  cap_lints = "allow"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/sct-0.5.0/src/lib.rs"
  extern_rlib = [
    "ring",
    "untrusted",
  ]
}

rust_rlib("serde") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/serde-1.0.99/src/lib.rs"
  features = [
    "default",
    "derive",
    "serde_derive",
    "std",
  ]
  extern = [
    {
      label = ":serde_derive"
      crate_type = "proc_macro"
      crate_name = "serde_derive"
    },
  ]

  # Added by custom-build script.
  cfg = [
    "core_duration",
    "core_reverse",
    "core_try_from",
    "de_boxed_c_str",
    "de_rc_dst",
    "integer128",
    "num_nonzero",
    "num_nonzero_signed",
    "ops_bound",
    "range_inclusive",
    "std_atomic",
    "std_atomic64",
  ]
}

rust_proc_macro("serde_derive") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.99/src/lib.rs"
  features = [ "default" ]
  extern_rlib = [
    "proc_macro2",
    "quote",
    "syn",
  ]
}

rust_rlib("serde_json") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.40/src/lib.rs"
  features = [
    "default",
    "indexmap",
    "preserve_order",
  ]
  extern_rlib = [
    "indexmap",
    "itoa",
    "ryu",
    "serde",
  ]
}

rust_rlib("slab") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/slab-0.4.2/src/lib.rs"
}

rust_rlib("smallvec") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/smallvec-0.6.10/lib.rs"
  features = [
    "default",
    "std",
  ]
}

rust_rlib("source_map_mappings") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/source-map-mappings-0.5.0/src/lib.rs"
  extern_rlib = [
    "vlq",

    # Override: use rand v0.6.5 instead of v0.4.6.
    "rand",
  ]

  ## Override: use rand v0.6.5 instead of v0.4.6.
  # extern = [
  #   {
  #     label = ":rand-0.4.6"
  #     crate_type = "rlib"
  #     crate_name = "rand"
  #     crate_version = "0.4.6"
  #   },
  # ]
}

rust_rlib("spin") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/spin-0.5.1/src/lib.rs"
}

## Override: avoid dependency on on 'owning_ref'.
# rust_rlib("stable_deref_trait") {
#   cap_lints = "allow"
#   edition = "2015"
#   source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/stable_deref_trait-1.1.1/src/lib.rs"
#   features = [
#     "default",
#     "std",
#   ]
# }

rust_rlib("string") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/string-0.2.1/src/lib.rs"
  features = [
    "bytes",
    "default",
  ]
  extern_rlib = [ "bytes" ]
}

rust_rlib("strsim") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/strsim-0.8.0/src/lib.rs"
}

rust_rlib("syn") {
  cap_lints = "allow"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/syn-1.0.3/src/lib.rs"
  features = [
    "clone-impls",
    "default",
    "derive",
    "parsing",
    "printing",
    "proc-macro",
    "quote",
    "visit",
  ]
  extern_rlib = [
    "proc_macro2",
    "quote",
    "unicode_xid",
  ]

  # Added by custom-build script.
  cfg = [ "syn_disable_nightly_tests" ]
}

rust_rlib("tempfile") {
  cap_lints = "allow"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/tempfile-3.1.0/src/lib.rs"
  extern_rlib = [
    "cfg_if",
    "remove_dir_all",

    # Override: use rand v0.6.5 instead of v0.7.0.
    "rand",
  ]

  ## Override: use rand v0.6.5 instead of v0.7.0.
  # extern = [
  #   {
  #     label = ":rand-0.7.0"
  #     crate_type = "rlib"
  #     crate_name = "rand"
  #     crate_version = "0.7.0"
  #   },
  # ]
  if (is_posix) {
    extern_rlib += [ "libc" ]
  }
  if (is_win) {
    extern_rlib += [ "winapi" ]
  }
}

rust_rlib("termcolor") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/termcolor-1.0.5/src/lib.rs"
  if (is_win) {
    extern_rlib = [ "wincolor" ]
  }
}

rust_rlib("textwrap") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs"
  extern_rlib = [ "unicode_width" ]
}

rust_rlib("thread_local") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/thread_local-0.3.6/src/lib.rs"
  extern_rlib = [ "lazy_static" ]
}

rust_rlib("time") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/time-0.1.42/src/lib.rs"
  extern_rlib = [ "libc" ]
  if (is_win) {
    extern_rlib += [ "winapi" ]
  }
}

rust_rlib("tokio") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.22/src/lib.rs"
  features = [
    "bytes",
    "codec",
    "default",
    "fs",
    "io",
    "mio",
    "num_cpus",
    "reactor",
    "rt-full",
    "sync",
    "tcp",
    "timer",
    "tokio-codec",
    "tokio-current-thread",
    "tokio-executor",
    "tokio-fs",
    "tokio-io",
    "tokio-reactor",
    "tokio-sync",
    "tokio-tcp",
    "tokio-threadpool",
    "tokio-timer",
    "tokio-udp",
    "tokio-uds",
    "udp",
    "uds",
  ]
  extern_rlib = [
    "bytes",
    "futures",
    "mio",
    "num_cpus",
    "tokio_codec",
    "tokio_current_thread",
    "tokio_executor",
    "tokio_fs",
    "tokio_io",
    "tokio_reactor",
    "tokio_sync",
    "tokio_tcp",
    "tokio_threadpool",
    "tokio_timer",
    "tokio_udp",
  ]
  if (is_posix) {
    extern_rlib += [ "tokio_uds" ]
  }
}

rust_rlib("tokio_buf") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/tokio-buf-0.1.1/src/lib.rs"
  features = [
    "default",
    "either",
    "util",
  ]
  extern_rlib = [
    "bytes",
    "either",
    "futures",
  ]
}

rust_rlib("tokio_codec") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/tokio-codec-0.1.1/src/lib.rs"
  extern_rlib = [
    "bytes",
    "futures",
    "tokio_io",
  ]
}

rust_rlib("tokio_current_thread") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/tokio-current-thread-0.1.6/src/lib.rs"
  extern_rlib = [
    "futures",
    "tokio_executor",
  ]
}

rust_rlib("tokio_executor") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/tokio-executor-0.1.8/src/lib.rs"
  extern_rlib = [
    "crossbeam_utils",
    "futures",
  ]
}

rust_rlib("tokio_fs") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/tokio-fs-0.1.6/src/lib.rs"
  extern_rlib = [
    "futures",
    "tokio_io",
    "tokio_threadpool",
  ]
}

rust_rlib("tokio_io") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/tokio-io-0.1.12/src/lib.rs"
  extern_rlib = [
    "bytes",
    "futures",
    "log",
  ]
}

rust_rlib("tokio_process") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/tokio-process-0.2.4/src/lib.rs"
  extern_rlib = [
    "futures",
    "tokio_io",
    "tokio_reactor",
  ]
  if (is_posix) {
    extern_rlib += [
      "crossbeam_queue",
      "lazy_static",
      "libc",
      "log",
      "mio",
      "tokio_signal",
    ]
  }
  if (is_win) {
    extern_rlib += [
      "mio_named_pipes",
      "winapi",
    ]
  }
}

rust_rlib("tokio_reactor") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/tokio-reactor-0.1.9/src/lib.rs"
  extern_rlib = [
    "crossbeam_utils",
    "futures",
    "lazy_static",
    "log",
    "mio",
    "num_cpus",
    "parking_lot",
    "slab",
    "tokio_executor",
    "tokio_io",
    "tokio_sync",
  ]
}

rust_rlib("tokio_rustls") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/tokio-rustls-0.9.3/src/lib.rs"
  features = [
    "default",
    "futures",
    "tokio-io",
    "tokio-support",
  ]
  extern_rlib = [
    "futures",
    "rustls",
    "tokio_io",
    "webpki",
  ]
}

rust_rlib("tokio_sync") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/tokio-sync-0.1.6/src/lib.rs"
  extern_rlib = [
    "fnv",
    "futures",
  ]
}

rust_rlib("tokio_tcp") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/tokio-tcp-0.1.3/src/lib.rs"
  extern_rlib = [
    "bytes",
    "futures",
    "iovec",
    "mio",
    "tokio_io",
    "tokio_reactor",
  ]
}

rust_rlib("tokio_threadpool") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/tokio-threadpool-0.1.15/src/lib.rs"
  extern_rlib = [
    "crossbeam_deque",
    "crossbeam_queue",
    "crossbeam_utils",
    "futures",
    "log",
    "num_cpus",
    "rand",
    "slab",
    "tokio_executor",
  ]
}

rust_rlib("tokio_timer") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/tokio-timer-0.2.11/src/lib.rs"
  extern_rlib = [
    "crossbeam_utils",
    "futures",
    "slab",
    "tokio_executor",
  ]
}

rust_rlib("tokio_udp") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs"
  extern_rlib = [
    "bytes",
    "futures",
    "log",
    "mio",
    "tokio_codec",
    "tokio_io",
    "tokio_reactor",
  ]
}

rust_rlib("try_lock") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/try-lock-0.2.2/src/lib.rs"
}

rust_rlib("unicode_bidi") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/unicode-bidi-0.3.4/src/lib.rs"
  features = [ "default" ]
  extern_rlib = [ "matches" ]
}

rust_rlib("unicode_normalization") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/unicode-normalization-0.1.8/src/lib.rs"
  extern_rlib = [ "smallvec" ]
}

rust_rlib("unicode_segmentation") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/unicode-segmentation-1.3.0/src/lib.rs"
}

rust_rlib("unicode_width") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/unicode-width-0.1.6/src/lib.rs"
  features = [ "default" ]
}

rust_rlib("unicode_xid") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/unicode-xid-0.2.0/src/lib.rs"
  features = [ "default" ]
}

rust_rlib("untrusted") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs"
}

rust_rlib("url") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/url-2.1.0/src/lib.rs"
  extern_rlib = [
    "idna",
    "matches",
    "percent_encoding",
  ]
}

rust_rlib("utime") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/utime-0.2.1/src/lib.rs"
  extern_rlib = [ "libc" ]
  if (is_win) {
    extern_rlib += [ "kernel32" ]
    extern = [
      {
        label = ":winapi-0.2.8"
        crate_type = "rlib"
        crate_name = "winapi"
        crate_version = "0.2.8"
      },
    ]
  }

  # if (is_posix) {
  #   # Override: 'kernel32' should be a windows-only dependency.
  #   extern_rlib += [ "kernel32" ]
  #
  #   # Override: 'winapi' should be a windows-only dependency.
  #   extern = [
  #     {
  #       label = ":winapi-0.2.8"
  #       crate_type = "rlib"
  #       crate_name = "winapi"
  #       crate_version = "0.2.8"
  #     },
  #   ]
  # }
}

rust_rlib("vec_map") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/vec_map-0.8.1/src/lib.rs"
}

rust_rlib("vlq") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/vlq-0.5.1/src/lib.rs"
}

rust_rlib("want") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/want-0.2.0/src/lib.rs"
  extern_rlib = [
    "futures",
    "log",
    "try_lock",
  ]
}

rust_rlib("webpki") {
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/webpki-0.19.1/src/webpki.rs"
  features = [
    "default",
    "std",
    "trust_anchor_util",
  ]
  extern_rlib = [
    "ring",
    "untrusted",
  ]
}

rust_rlib("webpki_roots") {
  cap_lints = "allow"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/webpki-roots-0.16.0/src/lib.rs"
  extern_rlib = [
    "untrusted",
    "webpki",
  ]
}

## Override: use rand v0.6.5 instead.
# rust_rlib("rand-0.4.6") {
#   crate_name = "rand"
#   crate_version = "0.4.6"
#   cap_lints = "allow"
#   edition = "2015"
#   source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/rand-0.4.6/src/lib.rs"
#   features = [
#     "default",
#     "libc",
#     "std",
#   ]
#   if (is_posix) {
#     extern_rlib = [ "libc" ]
#   }
#
#   # Per the #[link(...)] attribute found in 'src/os.rs'.
#   if (is_mac) {
#     libs = [ "Security.framework" ]
#   }
#   if (is_win) {
#     extern_rlib = [ "winapi" ]
#   }
# }

## Override: use rand v0.6.5 instead.
# rust_rlib("rand-0.7.0") {
#   crate_name = "rand"
#   crate_version = "0.7.0"
#   cap_lints = "allow"
#   source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/rand-0.7.0/src/lib.rs"
#   features = [
#     "alloc",
#     "default",
#     "getrandom",
#     "getrandom_package",
#     "std",
#   ]
#   extern_rlib = [
#     "rand_chacha",
#     "rand_core",
#   ]
#   extern = [
#     {
#       label = ":getrandom"
#       crate_type = "rlib"
#       crate_name = "getrandom"
#       crate_alias = "getrandom_package"
#     },
#   ]
#   if (is_posix) {
#     extern_rlib += [ "libc" ]
#   }
# }

rust_rlib("rand_chacha-0.1.1") {
  crate_name = "rand_chacha"
  crate_version = "0.1.1"
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/rand_chacha-0.1.1/src/lib.rs"

  # Added by custom-build script.
  cfg = [ "rustc_1_26" ]

  # Override: use rand_core v0.4.2 instead of v0.3.1.
  extern = [
    {
      label = ":rand_core-0.4.2"
      crate_type = "rlib"
      crate_name = "rand_core"
      crate_version = "0.4.2"
    },
    # {
    #   label = ":rand_core-0.3.1"
    #   crate_type = "rlib"
    #   crate_name = "rand_core"
    #   crate_version = "0.3.1"
    # },
  ]
}

## Override: use rand_core v0.4.2 instead.
# rust_rlib("rand_core-0.3.1") {
#   crate_name = "rand_core"
#   crate_version = "0.3.1"
#   cap_lints = "allow"
#   edition = "2015"
#   source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/rand_core-0.3.1/src/lib.rs"
#   extern = [
#     {
#       label = ":rand_core-0.4.2"
#       crate_type = "rlib"
#       crate_name = "rand_core"
#       crate_version = "0.4.2"
#     },
#   ]
# }

rust_rlib("rand_core-0.4.2") {
  crate_name = "rand_core"
  crate_version = "0.4.2"
  cap_lints = "allow"
  edition = "2015"
  source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs"
  features = [
    "alloc",
    "std",
  ]
}

## Override: use scopeguard v1.0.0 instead.
# rust_rlib("scopeguard-0.3.3") {
#   crate_name = "scopeguard"
#   crate_version = "0.3.3"
#   cap_lints = "allow"
#   edition = "2015"
#   source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/scopeguard-0.3.3/src/lib.rs"
# }

if (is_posix) {
  rust_rlib("arc_swap") {
    cap_lints = "allow"
    edition = "2015"
    source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/arc-swap-0.4.2/src/lib.rs"
  }

  rust_rlib("mio_uds") {
    cap_lints = "allow"
    edition = "2015"
    source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/mio-uds-0.6.7/src/lib.rs"
    extern_rlib = [
      "iovec",
      "libc",
      "mio",
    ]
  }

  rust_rlib("nix") {
    cap_lints = "allow"
    edition = "2015"
    source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/nix-0.14.1/src/lib.rs"
    extern_rlib = [
      "bitflags",
      "cfg_if",
      "libc",
      "void",
    ]
  }

  rust_rlib("signal_hook") {
    cap_lints = "allow"
    edition = "2015"
    source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/signal-hook-0.1.10/src/lib.rs"
    extern_rlib = [
      "libc",
      "signal_hook_registry",
    ]
  }

  rust_rlib("signal_hook_registry") {
    cap_lints = "allow"
    edition = "2015"
    source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/signal-hook-registry-1.1.1/src/lib.rs"
    extern_rlib = [
      "arc_swap",
      "libc",
    ]
  }

  rust_rlib("tokio_signal") {
    cap_lints = "allow"
    edition = "2015"
    source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/tokio-signal-0.2.7/src/lib.rs"
    extern_rlib = [
      "futures",
      "libc",
      "mio",
      "mio_uds",
      "signal_hook",
      "tokio_executor",
      "tokio_io",
      "tokio_reactor",
    ]
  }

  rust_rlib("tokio_uds") {
    cap_lints = "allow"
    edition = "2015"
    source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/tokio-uds-0.2.5/src/lib.rs"
    extern_rlib = [
      "bytes",
      "futures",
      "iovec",
      "libc",
      "log",
      "mio",
      "mio_uds",
      "tokio_codec",
      "tokio_io",
      "tokio_reactor",
    ]
  }

  rust_rlib("utf8parse") {
    cap_lints = "allow"
    edition = "2015"
    source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/utf8parse-0.1.1/src/lib.rs"
  }

  rust_rlib("void") {
    cap_lints = "allow"
    edition = "2015"
    source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/void-1.0.2/src/lib.rs"
    features = [
      "default",
      "std",
    ]
  }

  ## Override: use ansi_term v0.12.0 instead.
  # rust_rlib("ansi_term-0.11.0") {
  #   crate_name = "ansi_term"
  #   crate_version = "0.11.0"
  #   cap_lints = "allow"
  #   edition = "2015"
  #   source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ansi_term-0.11.0/src/lib.rs"
  # }
}

if (is_win) {
  rust_rlib("fwdansi") {
    cap_lints = "allow"
    edition = "2015"
    source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/fwdansi-1.0.1/src/lib.rs"
    extern_rlib = [
      "memchr",
      "termcolor",
    ]
  }

  rust_rlib("kernel32") {
    cap_lints = "allow"
    edition = "2015"
    source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/kernel32-sys-0.2.2/src/lib.rs"
    extern = [
      {
        label = ":winapi-0.2.8"
        crate_type = "rlib"
        crate_name = "winapi"
        crate_version = "0.2.8"
      },
    ]

    # Added by custom-build script.
    libs = [ "kernel32.lib" ]
  }

  rust_rlib("mio_named_pipes") {
    cap_lints = "allow"
    edition = "2015"
    source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/mio-named-pipes-0.1.6/src/lib.rs"
    extern_rlib = [
      "log",
      "mio",
      "miow",
      "winapi",
    ]
  }

  rust_rlib("miow") {
    cap_lints = "allow"
    edition = "2015"
    source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/miow-0.3.3/src/lib.rs"
    extern_rlib = [
      "socket2",
      "winapi",
    ]
  }

  rust_rlib("socket2") {
    cap_lints = "allow"
    source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/socket2-0.3.11/src/lib.rs"
    extern_rlib = [ "winapi" ]
  }

  rust_rlib("winapi") {
    cap_lints = "allow"
    edition = "2015"
    source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/winapi-0.3.7/src/lib.rs"
    features = [
      "consoleapi",
      "errhandlingapi",
      "fileapi",
      "handleapi",
      "ioapiset",
      "knownfolders",
      "minwinbase",
      "minwindef",
      "namedpipeapi",
      "ntdef",
      "ntsecapi",
      "ntstatus",
      "objbase",
      "processenv",
      "processthreadsapi",
      "profileapi",
      "shlobj",
      "std",
      "synchapi",
      "sysinfoapi",
      "threadpoollegacyapiset",
      "timezoneapi",
      "winbase",
      "wincon",
      "winerror",
      "winnt",
      "winsock2",
      "winuser",
      "ws2def",
      "ws2ipdef",
      "ws2tcpip",
      "wtypesbase",

      # Added by custom-build script.
      "basetsd",
      "cfg",
      "cfgmgr32",
      "combaseapi",
      "devpropdef",
      "excpt",
      "guiddef",
      "in6addr",
      "inaddr",
      "ktmtypes",
      "libloaderapi",
      "limits",
      "lsalookup",
      "mstcpip",
      "objidl",
      "objidlbase",
      "propidl",
      "qos",
      "rpc",
      "rpcdce",
      "rpcndr",
      "shtypes",
      "sspi",
      "subauth",
      "unknwnbase",
      "vadefs",
      "vcruntime",
      "wincontypes",
      "wincred",
      "windef",
      "wingdi",
      "winreg",
      "wtypes",
    ]

    # Added by custom-build script.
    libs = [
      "advapi32.lib",
      "cfgmgr32.lib",
      "credui.lib",
      "fwpuclnt.lib",
      "gdi32.lib",
      "kernel32.lib",
      "msimg32.lib",
      "ntdll.lib",
      "ole32.lib",
      "opengl32.lib",
      "secur32.lib",
      "shell32.lib",
      "synchronization.lib",
      "user32.lib",
      "winspool.lib",
      "ws2_32.lib",
    ]
  }

  rust_rlib("winapi_util") {
    cap_lints = "allow"
    edition = "2015"
    source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/winapi-util-0.1.2/src/lib.rs"
    extern_rlib = [ "winapi" ]
  }

  rust_rlib("wincolor") {
    cap_lints = "allow"
    edition = "2015"
    source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/wincolor-1.0.2/src/lib.rs"
    extern_rlib = [
      "winapi",
      "winapi_util",
    ]
  }

  rust_rlib("ws2_32") {
    cap_lints = "allow"
    edition = "2015"
    source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/ws2_32-sys-0.2.1/src/lib.rs"
    extern = [
      {
        label = ":winapi-0.2.8"
        crate_type = "rlib"
        crate_name = "winapi"
        crate_version = "0.2.8"
      },
    ]

    # Added by custom-build script.
    libs = [ "ws2_32.lib" ]
  }

  rust_rlib("miow-0.2.1") {
    crate_name = "miow"
    crate_version = "0.2.1"
    cap_lints = "allow"
    edition = "2015"
    source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/miow-0.2.1/src/lib.rs"
    extern_rlib = [
      "kernel32",
      "net2",
      "ws2_32",
    ]
    extern = [
      {
        label = ":winapi-0.2.8"
        crate_type = "rlib"
        crate_name = "winapi"
        crate_version = "0.2.8"
      },
    ]
  }

  rust_rlib("winapi-0.2.8") {
    crate_name = "winapi"
    crate_version = "0.2.8"
    cap_lints = "allow"
    edition = "2015"
    source_root = "$cargo_home/registry/src/github.com-1ecc6299db9ec823/winapi-0.2.8/src/lib.rs"
  }
}
