# Copyright 2018-2019 the Deno authors. All rights reserved. MIT license.
import("//build/toolchain/cc_wrapper.gni")
import("//build_extra/rust/rust.gni")
import("//third_party/v8/gni/snapshot_toolchain.gni")
import("//third_party/v8/gni/v8.gni")
import("deno.gni")

main_extern = [
  {
    label = "../core:deno"
    crate_name = "deno"
    crate_type = "rlib"
  },
  {
    label = "$rust_build:serde_derive"
    crate_name = "serde_derive"
    crate_type = "proc_macro"
  },
]
main_extern_rlib = [
  "ansi_term",
  "atty",
  "clap",
  "dirs",
  "futures",
  "http",
  "hyper",
  "hyper_rustls",
  "indexmap",
  "lazy_static",
  "libc",
  "log",
  "rand",
  "regex",
  "remove_dir_all",
  "ring",
  "rustyline",
  "serde",
  "serde_json",
  "source_map_mappings",
  "tempfile",
  "termcolor",
  "tokio",
  "tokio_executor",
  "tokio_fs",
  "tokio_io",
  "tokio_process",
  "tokio_rustls",
  "tokio_threadpool",
  "url",
  "utime",
]
if (is_win) {
  main_extern_rlib += [
    "fwdansi",
    "winapi",
  ]
}
if (is_posix) {
  main_extern_rlib += [ "nix" ]
}

ts_sources = [
  "../js/assets.ts",
  "../js/blob.ts",
  "../js/body.ts",
  "../js/buffer.ts",
  "../js/build.ts",
  "../js/chmod.ts",
  "../js/chown.ts",
  "../js/colors.ts",
  "../js/compiler.ts",
  "../js/console.ts",
  "../js/console_table.ts",
  "../js/copy_file.ts",
  "../js/core.ts",
  "../js/custom_event.ts",
  "../js/deno.ts",
  "../js/diagnostics.ts",
  "../js/dir.ts",
  "../js/dispatch.ts",
  "../js/dispatch_json.ts",
  "../js/dispatch_minimal.ts",
  "../js/dom_file.ts",
  "../js/dom_types.ts",
  "../js/dom_util.ts",
  "../js/error_stack.ts",
  "../js/errors.ts",
  "../js/event.ts",
  "../js/event_target.ts",
  "../js/fetch.ts",
  "../js/file_info.ts",
  "../js/files.ts",
  "../js/form_data.ts",
  "../js/format_error.ts",
  "../js/get_random_values.ts",
  "../js/globals.ts",
  "../js/headers.ts",
  "../js/io.ts",
  "../js/lib.web_assembly.d.ts",
  "../js/link.ts",
  "../js/location.ts",
  "../js/main.ts",
  "../js/make_temp_dir.ts",
  "../js/metrics.ts",
  "../js/mkdir.ts",
  "../js/mock_builtin.js",
  "../js/net.ts",
  "../js/os.ts",
  "../js/performance.ts",
  "../js/permissions.ts",
  "../js/plugins.d.ts",
  "../js/process.ts",
  "../js/read_dir.ts",
  "../js/read_file.ts",
  "../js/read_link.ts",
  "../js/remove.ts",
  "../js/rename.ts",
  "../js/repl.ts",
  "../js/request.ts",
  "../js/resources.ts",
  "../js/stat.ts",
  "../js/symlink.ts",
  "../js/text_encoding.ts",
  "../js/timers.ts",
  "../js/truncate.ts",
  "../js/type_directives.ts",
  "../js/types.ts",
  "../js/url.ts",
  "../js/url_search_params.ts",
  "../js/util.ts",
  "../js/utime.ts",
  "../js/version.ts",
  "../js/window.ts",
  "../js/workers.ts",
  "../js/write_file.ts",
  "../js/xeval.ts",
  "../tsconfig.json",

  # Listing package.json and yarn.lock as sources ensures the bundle is rebuilt
  # when npm packages are added/removed or their contents changes.
  "../package.json",
  "../third_party/yarn.lock",
]

# When Cargo is driving the build, GN/Ninja are used to produce these non-Rust
# targets. Cargo handles all Rust source files and the final linking step.
group("deno_deps") {
  deps = [
    ":snapshot_compiler",
    ":snapshot_deno",
  ]
}

# Optimized dependencies for cross compiled builds.
# This can be removed once we get snapshots into cross compiled builds.
group("deno_deps_cross") {
  testonly = true
  deps = [
    ":compiler_bundle",
    ":main_bundle",
  ]
}

# Reads the cargo info from Cargo.toml
deno_cargo_info = exec_script("../build_extra/rust/get_cargo_info.py",
                              [ rebase_path("Cargo.toml", root_build_dir) ],
                              "json")

rust_executable("deno") {
  source_root = "main.rs"
  extern = main_extern
  extern_rlib = main_extern_rlib
  deps = [
    ":deno_deps",
  ]

  # Extract version from Cargo.toml
  # TODO integrate this into rust.gni by allowing the rust_executable template
  # to specify a cargo.toml from which it will extract a version.
  crate_version = deno_cargo_info.version
  inputs = [
    "Cargo.toml",
  ]
}

rust_test("cli_test") {
  source_root = "main.rs"
  extern = main_extern
  extern_rlib = main_extern_rlib
  deps = [
    ":deno_deps",
  ]

  # Extract version from Cargo.toml
  crate_version = deno_cargo_info.version
  inputs = [
    "Cargo.toml",
  ]
}

# Generates the core TypeScript type library for deno that will be
# included in the runtime bundle
run_node("deno_runtime_declaration") {
  out_dir = target_gen_dir
  sources = ts_sources
  outputs = [
    "$out_dir/lib/lib.deno_runtime.d.ts",
  ]
  inputs = ts_sources + [
             "//tools/ts_library_builder/tsconfig.json",
             "//tools/ts_library_builder/main.ts",
             "//tools/ts_library_builder/build_library.ts",
             "//tools/ts_library_builder/ast_util.ts",
           ]
  args = [
    rebase_path("//node_modules/ts-node/dist/bin.js", root_build_dir),
    "--project",
    rebase_path("//tools/ts_library_builder/tsconfig.json"),
    "--skip-ignore",
    rebase_path("//tools/ts_library_builder/main.ts", root_build_dir),
    "--basePath",
    rebase_path("//", root_build_dir),
    "--inline",
    rebase_path("//js/lib.web_assembly.d.ts", root_build_dir),
    "--buildPath",
    rebase_path(root_build_dir, root_build_dir),
    "--outFile",
    rebase_path(outputs[0], root_build_dir),
    "--silent",
  ]
  if (is_debug) {
    args += [ "--debug" ]
  }
}

bundle("main_bundle") {
  out_dir = "$target_gen_dir/bundle/"
  out_name = "main"
  deps = [
    ":deno_runtime_declaration",
  ]
}

bundle("compiler_bundle") {
  out_dir = "$target_gen_dir/bundle/"
  out_name = "compiler"
  deps = [
    ":deno_runtime_declaration",
  ]
}

# Generates $target_gen_dir/snapshot_deno.bin
snapshot("snapshot_deno") {
  source_root = "$target_gen_dir/bundle/main.js"
  deps = [
    ":main_bundle",
  ]
}

# Generates $target_gen_dir/snapshot_compiler.bin
snapshot("snapshot_compiler") {
  source_root = "$target_gen_dir/bundle/compiler.js"
  deps = [
    ":compiler_bundle",
  ]
}

action("write_gn_args") {
  script = "//tools/write_gn_args.py"
  outputs = [
    "$target_gen_dir/gn_args.txt",
  ]
  args = [ rebase_path(outputs[0], root_build_dir) ]
}
