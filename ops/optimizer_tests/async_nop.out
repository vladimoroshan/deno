#[allow(non_camel_case_types)]
///Auto-generated by `deno_ops`, i.e: `#[op]`
///
///Use `op_void_async::decl()` to get an op-declaration
///you can include in a `deno_core::Extension`.
pub struct op_void_async;
#[doc(hidden)]
impl op_void_async {
    pub fn name() -> &'static str {
        stringify!(op_void_async)
    }
    pub fn v8_fn_ptr<'scope>() -> deno_core::v8::FunctionCallback {
        use deno_core::v8::MapFnTo;
        Self::v8_func.map_fn_to()
    }
    pub fn decl<'scope>() -> deno_core::OpDecl {
        deno_core::OpDecl {
            name: Self::name(),
            v8_fn_ptr: Self::v8_fn_ptr(),
            enabled: true,
            fast_fn: Some(
                Box::new(op_void_async_fast {
                    _phantom: ::std::marker::PhantomData,
                }),
            ),
            is_async: true,
            is_unstable: false,
            is_v8: false,
            argc: 0usize,
        }
    }
    #[inline]
    #[allow(clippy::too_many_arguments)]
    async fn call() {}
    pub fn v8_func<'scope>(
        scope: &mut deno_core::v8::HandleScope<'scope>,
        args: deno_core::v8::FunctionCallbackArguments,
        mut rv: deno_core::v8::ReturnValue,
    ) {
        use deno_core::futures::FutureExt;
        let ctx = unsafe {
            &*(deno_core::v8::Local::<deno_core::v8::External>::cast(args.data()).value()
                as *const deno_core::_ops::OpCtx)
        };
        let op_id = ctx.id;
        let promise_id = args.get(0);
        let promise_id = deno_core::v8::Local::<
            deno_core::v8::Integer,
        >::try_from(promise_id)
            .map(|l| l.value() as deno_core::PromiseId)
            .map_err(deno_core::anyhow::Error::from);
        let promise_id: deno_core::PromiseId = match promise_id {
            Ok(promise_id) => promise_id,
            Err(err) => {
                deno_core::_ops::throw_type_error(
                    scope,
                    format!("invalid promise id: {}", err),
                );
                return;
            }
        };
        let get_class = {
            let state = ::std::cell::RefCell::borrow(&ctx.state);
            state.tracker.track_async(op_id);
            state.get_error_class_fn
        };
        deno_core::_ops::queue_async_op(
            ctx,
            scope,
            false,
            async move {
                let result = Self::call().await;
                let result = Ok(result);
                (promise_id, op_id, deno_core::_ops::to_op_result(get_class, result))
            },
        );
    }
}
struct op_void_async_fast {
    _phantom: ::std::marker::PhantomData<()>,
}
impl<'scope> deno_core::v8::fast_api::FastFunction for op_void_async_fast {
    fn function(&self) -> *const ::std::ffi::c_void {
        op_void_async_fast_fn as *const ::std::ffi::c_void
    }
    fn args(&self) -> &'static [deno_core::v8::fast_api::Type] {
        use deno_core::v8::fast_api::Type::*;
        use deno_core::v8::fast_api::CType;
        &[V8Value, Int32, CallbackOptions]
    }
    fn return_type(&self) -> deno_core::v8::fast_api::CType {
        deno_core::v8::fast_api::CType::Void
    }
}
fn op_void_async_fast_fn<'scope>(
    _: deno_core::v8::Local<deno_core::v8::Object>,
    __promise_id: i32,
    fast_api_callback_options: *mut deno_core::v8::fast_api::FastApiCallbackOptions,
) -> () {
    use deno_core::v8;
    use deno_core::_ops;
    let __opts: &mut v8::fast_api::FastApiCallbackOptions = unsafe {
        &mut *fast_api_callback_options
    };
    let __ctx = unsafe {
        &*(v8::Local::<v8::External>::cast(unsafe { __opts.data.data }).value()
            as *const _ops::OpCtx)
    };
    let op_state = __ctx.state.clone();
    let result = op_void_async::call();
    let __op_id = __ctx.id;
    let __state = ::std::cell::RefCell::borrow(&__ctx.state);
    __state.tracker.track_async(__op_id);
    let result = _ops::queue_fast_async_op(
        __ctx,
        async move {
            let result = result.await;
            (__promise_id, __op_id, _ops::OpResult::Ok(result.into()))
        },
    );
    result
}
