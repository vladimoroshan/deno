#[allow(non_camel_case_types)]
///Auto-generated by `deno_ops`, i.e: `#[op]`
///
///Use `op_now::decl()` to get an op-declaration
///you can include in a `deno_core::Extension`.
pub struct op_now;
#[doc(hidden)]
impl op_now {
    pub fn name() -> &'static str {
        stringify!(op_now)
    }
    pub fn v8_fn_ptr<'scope, TP>() -> deno_core::v8::FunctionCallback
    where
        TP: TimersPermission + 'static,
    {
        use deno_core::v8::MapFnTo;
        Self::v8_func::<TP>.map_fn_to()
    }
    pub fn decl<'scope, TP>() -> deno_core::OpDecl
    where
        TP: TimersPermission + 'static,
    {
        deno_core::OpDecl {
            name: Self::name(),
            v8_fn_ptr: Self::v8_fn_ptr::<TP>(),
            enabled: true,
            fast_fn: Some(
                Box::new(op_now_fast::<TP> {
                    _phantom: ::std::marker::PhantomData,
                }),
            ),
            is_async: false,
            is_unstable: false,
            is_v8: false,
            argc: 1usize,
        }
    }
    #[inline]
    #[allow(clippy::too_many_arguments)]
    pub fn call<TP>(state: &mut OpState, buf: &mut [u8])
    where
        TP: TimersPermission + 'static,
    {}
    pub fn v8_func<'scope, TP>(
        scope: &mut deno_core::v8::HandleScope<'scope>,
        args: deno_core::v8::FunctionCallbackArguments,
        mut rv: deno_core::v8::ReturnValue,
    )
    where
        TP: TimersPermission + 'static,
    {
        let ctx = unsafe {
            &*(deno_core::v8::Local::<deno_core::v8::External>::cast(args.data()).value()
                as *const deno_core::_ops::OpCtx)
        };
        let arg_0 = {
            let value = args.get(0usize as i32);
            match deno_core::v8::Local::<deno_core::v8::ArrayBuffer>::try_from(value) {
                Ok(b) => {
                    let byte_length = b.byte_length();
                    if let Some(data) = b.data() {
                        let store = data.cast::<u8>().as_ptr();
                        unsafe { ::std::slice::from_raw_parts_mut(store, byte_length) }
                    } else {
                        &mut []
                    }
                }
                Err(_) => {
                    if let Ok(view)
                        = deno_core::v8::Local::<
                            deno_core::v8::ArrayBufferView,
                        >::try_from(value) {
                        let len = view.byte_length();
                        let offset = view.byte_offset();
                        let buffer = match view.buffer(scope) {
                            Some(v) => v,
                            None => {
                                return deno_core::_ops::throw_type_error(
                                    scope,
                                    format!("Expected ArrayBufferView at position {}", 0usize),
                                );
                            }
                        };
                        if let Some(data) = buffer.data() {
                            let store = data.cast::<u8>().as_ptr();
                            unsafe {
                                ::std::slice::from_raw_parts_mut(store.add(offset), len)
                            }
                        } else {
                            &mut []
                        }
                    } else {
                        return deno_core::_ops::throw_type_error(
                            scope,
                            format!("Expected ArrayBufferView at position {}", 0usize),
                        );
                    }
                }
            }
        };
        let result = Self::call::<
            TP,
        >(&mut std::cell::RefCell::borrow_mut(&ctx.state), arg_0);
        let op_state = ::std::cell::RefCell::borrow(&*ctx.state);
        op_state.tracker.track_sync(ctx.id);
    }
}
struct op_now_fast<TP> {
    _phantom: ::std::marker::PhantomData<TP>,
}
impl<'scope, TP> deno_core::v8::fast_api::FastFunction for op_now_fast<TP>
where
    TP: TimersPermission + 'static,
{
    fn function(&self) -> *const ::std::ffi::c_void {
        op_now_fast_fn::<TP> as *const ::std::ffi::c_void
    }
    fn args(&self) -> &'static [deno_core::v8::fast_api::Type] {
        use deno_core::v8::fast_api::Type::*;
        use deno_core::v8::fast_api::CType;
        &[V8Value, TypedArray(CType::Uint8), CallbackOptions]
    }
    fn return_type(&self) -> deno_core::v8::fast_api::CType {
        deno_core::v8::fast_api::CType::Void
    }
}
fn op_now_fast_fn<'scope, TP>(
    _: deno_core::v8::Local<deno_core::v8::Object>,
    buf: *const deno_core::v8::fast_api::FastApiTypedArray<u8>,
    fast_api_callback_options: *mut deno_core::v8::fast_api::FastApiCallbackOptions,
) -> ()
where
    TP: TimersPermission + 'static,
{
    use deno_core::v8;
    use deno_core::_ops;
    let __opts: &mut v8::fast_api::FastApiCallbackOptions = unsafe {
        &mut *fast_api_callback_options
    };
    let __ctx = unsafe {
        &*(v8::Local::<v8::External>::cast(unsafe { __opts.data.data }).value()
            as *const _ops::OpCtx)
    };
    let state = &mut ::std::cell::RefCell::borrow_mut(&__ctx.state);
    let buf = match unsafe { &*buf }.get_storage_if_aligned() {
        Some(v) => v,
        None => {
            unsafe { &mut *fast_api_callback_options }.fallback = true;
            return Default::default();
        }
    };
    let result = op_now::call::<TP>(state, buf);
    result
}
