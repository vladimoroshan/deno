#[allow(non_camel_case_types)]
///Auto-generated by `deno_ops`, i.e: `#[op]`
///
///Use `op_read::decl()` to get an op-declaration
///you can include in a `deno_core::Extension`.
pub struct op_read;
#[doc(hidden)]
impl op_read {
    pub fn name() -> &'static str {
        stringify!(op_read)
    }
    pub fn v8_fn_ptr<'scope>() -> deno_core::v8::FunctionCallback {
        use deno_core::v8::MapFnTo;
        Self::v8_func.map_fn_to()
    }
    pub fn decl<'scope>() -> deno_core::OpDecl {
        deno_core::OpDecl {
            name: Self::name(),
            v8_fn_ptr: Self::v8_fn_ptr(),
            enabled: true,
            fast_fn: Some(
                Box::new(op_read_fast {
                    _phantom: ::std::marker::PhantomData,
                }),
            ),
            is_async: true,
            is_unstable: false,
            is_v8: false,
            argc: 2usize,
        }
    }
    #[inline]
    #[allow(clippy::too_many_arguments)]
    async fn call(
        state: Rc<RefCell<OpState>>,
        rid: ResourceId,
        buf: &mut [u8],
    ) -> Result<u32, Error> {}
    pub fn v8_func<'scope>(
        scope: &mut deno_core::v8::HandleScope<'scope>,
        args: deno_core::v8::FunctionCallbackArguments,
        mut rv: deno_core::v8::ReturnValue,
    ) {
        use deno_core::futures::FutureExt;
        let ctx = unsafe {
            &*(deno_core::v8::Local::<deno_core::v8::External>::cast(args.data()).value()
                as *const deno_core::_ops::OpCtx)
        };
        let op_id = ctx.id;
        let promise_id = args.get(0);
        let promise_id = deno_core::v8::Local::<
            deno_core::v8::Integer,
        >::try_from(promise_id)
            .map(|l| l.value() as deno_core::PromiseId)
            .map_err(deno_core::anyhow::Error::from);
        let promise_id: deno_core::PromiseId = match promise_id {
            Ok(promise_id) => promise_id,
            Err(err) => {
                deno_core::_ops::throw_type_error(
                    scope,
                    format!("invalid promise id: {}", err),
                );
                return;
            }
        };
        let arg_0 = args.get(1usize as i32);
        let arg_0 = match deno_core::serde_v8::from_v8(scope, arg_0) {
            Ok(v) => v,
            Err(err) => {
                let msg = format!(
                    "Error parsing args at position {}: {}", 1usize,
                    deno_core::anyhow::Error::from(err)
                );
                return deno_core::_ops::throw_type_error(scope, msg);
            }
        };
        let arg_1 = {
            let value = args.get(2usize as i32);
            match deno_core::v8::Local::<deno_core::v8::ArrayBuffer>::try_from(value) {
                Ok(b) => {
                    let byte_length = b.byte_length();
                    if let Some(data) = b.data() {
                        let store = data.cast::<u8>().as_ptr();
                        unsafe { ::std::slice::from_raw_parts_mut(store, byte_length) }
                    } else {
                        &mut []
                    }
                }
                Err(_) => {
                    if let Ok(view)
                        = deno_core::v8::Local::<
                            deno_core::v8::ArrayBufferView,
                        >::try_from(value) {
                        let len = view.byte_length();
                        let offset = view.byte_offset();
                        let buffer = match view.buffer(scope) {
                            Some(v) => v,
                            None => {
                                return deno_core::_ops::throw_type_error(
                                    scope,
                                    format!("Expected ArrayBufferView at position {}", 2usize),
                                );
                            }
                        };
                        if let Some(data) = buffer.data() {
                            let store = data.cast::<u8>().as_ptr();
                            unsafe {
                                ::std::slice::from_raw_parts_mut(store.add(offset), len)
                            }
                        } else {
                            &mut []
                        }
                    } else {
                        return deno_core::_ops::throw_type_error(
                            scope,
                            format!("Expected ArrayBufferView at position {}", 2usize),
                        );
                    }
                }
            }
        };
        let get_class = {
            let state = ::std::cell::RefCell::borrow(&ctx.state);
            state.tracker.track_async(op_id);
            state.get_error_class_fn
        };
        deno_core::_ops::queue_async_op(
            ctx,
            scope,
            false,
            async move {
                let result = Self::call(ctx.state.clone(), arg_0, arg_1).await;
                (promise_id, op_id, deno_core::_ops::to_op_result(get_class, result))
            },
        );
    }
}
struct op_read_fast {
    _phantom: ::std::marker::PhantomData<()>,
}
impl<'scope> deno_core::v8::fast_api::FastFunction for op_read_fast {
    fn function(&self) -> *const ::std::ffi::c_void {
        op_read_fast_fn as *const ::std::ffi::c_void
    }
    fn args(&self) -> &'static [deno_core::v8::fast_api::Type] {
        use deno_core::v8::fast_api::Type::*;
        use deno_core::v8::fast_api::CType;
        &[V8Value, Int32, Uint32, TypedArray(CType::Uint8), CallbackOptions]
    }
    fn return_type(&self) -> deno_core::v8::fast_api::CType {
        deno_core::v8::fast_api::CType::Void
    }
}
fn op_read_fast_fn<'scope>(
    _: deno_core::v8::Local<deno_core::v8::Object>,
    __promise_id: i32,
    rid: ResourceId,
    buf: *const deno_core::v8::fast_api::FastApiTypedArray<u8>,
    fast_api_callback_options: *mut deno_core::v8::fast_api::FastApiCallbackOptions,
) -> () {
    use deno_core::v8;
    use deno_core::_ops;
    let __opts: &mut v8::fast_api::FastApiCallbackOptions = unsafe {
        &mut *fast_api_callback_options
    };
    let __ctx = unsafe {
        &*(v8::Local::<v8::External>::cast(unsafe { __opts.data.data }).value()
            as *const _ops::OpCtx)
    };
    let state = __ctx.state.clone();
    let buf = match unsafe { &*buf }.get_storage_if_aligned() {
        Some(v) => v,
        None => {
            unsafe { &mut *fast_api_callback_options }.fallback = true;
            return Default::default();
        }
    };
    let result = op_read::call(state, rid, buf);
    let __op_id = __ctx.id;
    let __state = ::std::cell::RefCell::borrow(&__ctx.state);
    __state.tracker.track_async(__op_id);
    let __get_class = __state.get_error_class_fn;
    let result = _ops::queue_fast_async_op(
        __ctx,
        async move {
            let result = result.await;
            (__promise_id, __op_id, _ops::to_op_result(__get_class, result))
        },
    );
}
