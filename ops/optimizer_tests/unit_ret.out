#[allow(non_camel_case_types)]
///Auto-generated by `deno_ops`, i.e: `#[op]`
///
///Use `op_unit::decl()` to get an op-declaration
///you can include in a `deno_core::Extension`.
pub struct op_unit;
#[doc(hidden)]
impl op_unit {
    pub fn name() -> &'static str {
        stringify!(op_unit)
    }
    pub fn v8_fn_ptr<'scope>() -> deno_core::v8::FunctionCallback {
        use deno_core::v8::MapFnTo;
        Self::v8_func.map_fn_to()
    }
    pub fn decl<'scope>() -> deno_core::OpDecl {
        deno_core::OpDecl {
            name: Self::name(),
            v8_fn_ptr: Self::v8_fn_ptr(),
            enabled: true,
            fast_fn: Some(
                Box::new(op_unit_fast {
                    _phantom: ::std::marker::PhantomData,
                }),
            ),
            is_async: false,
            is_unstable: false,
            is_v8: false,
            argc: 0usize,
        }
    }
    #[inline]
    #[allow(clippy::too_many_arguments)]
    fn call() -> () {
        ()
    }
    pub fn v8_func<'scope>(
        scope: &mut deno_core::v8::HandleScope<'scope>,
        args: deno_core::v8::FunctionCallbackArguments,
        mut rv: deno_core::v8::ReturnValue,
    ) {
        let ctx = unsafe {
            &*(deno_core::v8::Local::<deno_core::v8::External>::cast(args.data()).value()
                as *const deno_core::_ops::OpCtx)
        };
        let result = Self::call();
        let op_state = ::std::cell::RefCell::borrow(&*ctx.state);
        op_state.tracker.track_sync(ctx.id);
        match deno_core::serde_v8::to_v8(scope, result) {
            Ok(ret) => rv.set(ret),
            Err(err) => {
                deno_core::_ops::throw_type_error(
                    scope,
                    format!(
                        "Error serializing return: {}",
                        deno_core::anyhow::Error::from(err)
                    ),
                )
            }
        };
    }
}
struct op_unit_fast {
    _phantom: ::std::marker::PhantomData<()>,
}
impl<'scope> deno_core::v8::fast_api::FastFunction for op_unit_fast {
    fn function(&self) -> *const ::std::ffi::c_void {
        op_unit_fast_fn as *const ::std::ffi::c_void
    }
    fn args(&self) -> &'static [deno_core::v8::fast_api::Type] {
        use deno_core::v8::fast_api::Type::*;
        use deno_core::v8::fast_api::CType;
        &[V8Value]
    }
    fn return_type(&self) -> deno_core::v8::fast_api::CType {
        deno_core::v8::fast_api::CType::Void
    }
}
fn op_unit_fast_fn<'scope>(_: deno_core::v8::Local<deno_core::v8::Object>) -> () {
    use deno_core::v8;
    use deno_core::_ops;
    let result = op_unit::call();
    result
}
