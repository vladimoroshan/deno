#[allow(non_camel_case_types)]
///Auto-generated by `deno_ops`, i.e: `#[op]`
///
///Use `op_add_4::decl()` to get an op-declaration
///you can include in a `deno_core::Extension`.
pub struct op_add_4;
#[doc(hidden)]
impl op_add_4 {
    pub fn name() -> &'static str {
        stringify!(op_add_4)
    }
    pub fn v8_fn_ptr<'scope>() -> deno_core::v8::FunctionCallback {
        use deno_core::v8::MapFnTo;
        Self::v8_func.map_fn_to()
    }
    pub fn decl<'scope>() -> deno_core::OpDecl {
        deno_core::OpDecl {
            name: Self::name(),
            v8_fn_ptr: Self::v8_fn_ptr(),
            enabled: true,
            fast_fn: Some(
                Box::new(op_add_4_fast {
                    _phantom: ::std::marker::PhantomData,
                }),
            ),
            is_async: false,
            is_unstable: false,
            is_v8: false,
            argc: 4usize,
        }
    }
    #[inline]
    #[allow(clippy::too_many_arguments)]
    fn call(x1: u32, x2: u32, x3: u32, x4: u32) -> Result<u32, anyhow::Error> {
        Ok(x1 + x2 + x3 + x4)
    }
    pub fn v8_func<'scope>(
        scope: &mut deno_core::v8::HandleScope<'scope>,
        args: deno_core::v8::FunctionCallbackArguments,
        mut rv: deno_core::v8::ReturnValue,
    ) {
        let ctx = unsafe {
            &*(deno_core::v8::Local::<deno_core::v8::External>::cast(args.data()).value()
                as *const deno_core::_ops::OpCtx)
        };
        {
            let op_state = &mut std::cell::RefCell::borrow_mut(&ctx.state);
            if let Some(err) = op_state.last_fast_op_error.take() {
                let exception = deno_core::error::to_v8_error(
                    scope,
                    op_state.get_error_class_fn,
                    &err,
                );
                scope.throw_exception(exception);
                return;
            }
        }
        let arg_0 = args.get(0usize as i32);
        let arg_0 = match deno_core::serde_v8::from_v8(scope, arg_0) {
            Ok(v) => v,
            Err(err) => {
                let msg = format!(
                    "Error parsing args at position {}: {}", 0usize,
                    deno_core::anyhow::Error::from(err)
                );
                return deno_core::_ops::throw_type_error(scope, msg);
            }
        };
        let arg_1 = args.get(1usize as i32);
        let arg_1 = match deno_core::serde_v8::from_v8(scope, arg_1) {
            Ok(v) => v,
            Err(err) => {
                let msg = format!(
                    "Error parsing args at position {}: {}", 1usize,
                    deno_core::anyhow::Error::from(err)
                );
                return deno_core::_ops::throw_type_error(scope, msg);
            }
        };
        let arg_2 = args.get(2usize as i32);
        let arg_2 = match deno_core::serde_v8::from_v8(scope, arg_2) {
            Ok(v) => v,
            Err(err) => {
                let msg = format!(
                    "Error parsing args at position {}: {}", 2usize,
                    deno_core::anyhow::Error::from(err)
                );
                return deno_core::_ops::throw_type_error(scope, msg);
            }
        };
        let arg_3 = args.get(3usize as i32);
        let arg_3 = match deno_core::serde_v8::from_v8(scope, arg_3) {
            Ok(v) => v,
            Err(err) => {
                let msg = format!(
                    "Error parsing args at position {}: {}", 3usize,
                    deno_core::anyhow::Error::from(err)
                );
                return deno_core::_ops::throw_type_error(scope, msg);
            }
        };
        let result = Self::call(arg_0, arg_1, arg_2, arg_3);
        let op_state = ::std::cell::RefCell::borrow(&*ctx.state);
        op_state.tracker.track_sync(ctx.id);
        match result {
            Ok(result) => {
                rv.set_uint32(result as u32);
            }
            Err(err) => {
                let exception = deno_core::error::to_v8_error(
                    scope,
                    op_state.get_error_class_fn,
                    &err,
                );
                scope.throw_exception(exception);
            }
        };
    }
}
struct op_add_4_fast {
    _phantom: ::std::marker::PhantomData<()>,
}
impl<'scope> deno_core::v8::fast_api::FastFunction for op_add_4_fast {
    fn function(&self) -> *const ::std::ffi::c_void {
        op_add_4_fast_fn as *const ::std::ffi::c_void
    }
    fn args(&self) -> &'static [deno_core::v8::fast_api::Type] {
        use deno_core::v8::fast_api::Type::*;
        use deno_core::v8::fast_api::CType;
        &[V8Value, Uint32, Uint32, Uint32, Uint32, CallbackOptions]
    }
    fn return_type(&self) -> deno_core::v8::fast_api::CType {
        deno_core::v8::fast_api::CType::Uint32
    }
}
fn op_add_4_fast_fn<'scope>(
    _: deno_core::v8::Local<deno_core::v8::Object>,
    x1: u32,
    x2: u32,
    x3: u32,
    x4: u32,
    fast_api_callback_options: *mut deno_core::v8::fast_api::FastApiCallbackOptions,
) -> u32 {
    use deno_core::v8;
    use deno_core::_ops;
    let __opts: &mut v8::fast_api::FastApiCallbackOptions = unsafe {
        &mut *fast_api_callback_options
    };
    let __ctx = unsafe {
        &*(v8::Local::<v8::External>::cast(unsafe { __opts.data.data }).value()
            as *const _ops::OpCtx)
    };
    let op_state = &mut ::std::cell::RefCell::borrow_mut(&__ctx.state);
    let result = op_add_4::call(x1, x2, x3, x4);
    match result {
        Ok(result) => result,
        Err(err) => {
            op_state.last_fast_op_error.replace(err);
            __opts.fallback = true;
            Default::default()
        }
    }
}
