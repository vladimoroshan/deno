#[allow(non_camel_case_types)]
///Auto-generated by `deno_ops`, i.e: `#[op]`
///
///Use `op_foo::decl()` to get an op-declaration
///you can include in a `deno_core::Extension`.
pub struct op_foo;
#[doc(hidden)]
impl op_foo {
    pub fn name() -> &'static str {
        stringify!(op_foo)
    }
    pub fn v8_fn_ptr<'scope, SP>() -> deno_core::v8::FunctionCallback
    where
        SP: SomePermission + 'static,
    {
        use deno_core::v8::MapFnTo;
        Self::v8_func::<SP>.map_fn_to()
    }
    pub fn decl<'scope, SP>() -> deno_core::OpDecl
    where
        SP: SomePermission + 'static,
    {
        deno_core::OpDecl {
            name: Self::name(),
            v8_fn_ptr: Self::v8_fn_ptr::<SP>(),
            enabled: true,
            fast_fn: Some(
                Box::new(op_foo_fast::<SP> {
                    _phantom: ::std::marker::PhantomData,
                }),
            ),
            is_async: false,
            is_unstable: false,
            is_v8: false,
            argc: 0usize,
        }
    }
    #[inline]
    #[allow(clippy::too_many_arguments)]
    pub fn call<SP>(state: &mut OpState)
    where
        SP: SomePermission + 'static,
    {}
    pub fn v8_func<'scope, SP>(
        scope: &mut deno_core::v8::HandleScope<'scope>,
        args: deno_core::v8::FunctionCallbackArguments,
        mut rv: deno_core::v8::ReturnValue,
    )
    where
        SP: SomePermission + 'static,
    {
        let ctx = unsafe {
            &*(deno_core::v8::Local::<deno_core::v8::External>::cast(args.data()).value()
                as *const deno_core::_ops::OpCtx)
        };
        let result = Self::call::<SP>(&mut std::cell::RefCell::borrow_mut(&ctx.state));
        let op_state = ::std::cell::RefCell::borrow(&*ctx.state);
        op_state.tracker.track_sync(ctx.id);
    }
}
struct op_foo_fast<SP> {
    _phantom: ::std::marker::PhantomData<SP>,
}
impl<'scope, SP> deno_core::v8::fast_api::FastFunction for op_foo_fast<SP>
where
    SP: SomePermission + 'static,
{
    fn function(&self) -> *const ::std::ffi::c_void {
        op_foo_fast_fn::<SP> as *const ::std::ffi::c_void
    }
    fn args(&self) -> &'static [deno_core::v8::fast_api::Type] {
        use deno_core::v8::fast_api::Type::*;
        use deno_core::v8::fast_api::CType;
        &[V8Value, CallbackOptions]
    }
    fn return_type(&self) -> deno_core::v8::fast_api::CType {
        deno_core::v8::fast_api::CType::Void
    }
}
fn op_foo_fast_fn<'scope, SP>(
    _: deno_core::v8::Local<deno_core::v8::Object>,
    fast_api_callback_options: *mut deno_core::v8::fast_api::FastApiCallbackOptions,
) -> ()
where
    SP: SomePermission + 'static,
{
    use deno_core::v8;
    use deno_core::_ops;
    let __opts: &mut v8::fast_api::FastApiCallbackOptions = unsafe {
        &mut *fast_api_callback_options
    };
    let __ctx = unsafe {
        &*(v8::Local::<v8::External>::cast(unsafe { __opts.data.data }).value()
            as *const _ops::OpCtx)
    };
    let state = &mut ::std::cell::RefCell::borrow_mut(&__ctx.state);
    let result = op_foo::call::<SP>(state);
    result
}
