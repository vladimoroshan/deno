#[allow(non_camel_case_types)]
///Auto-generated by `deno_ops`, i.e: `#[op]`
///
///Use `op_f64_buf::decl()` to get an op-declaration
///you can include in a `deno_core::Extension`.
pub struct op_f64_buf;
#[doc(hidden)]
impl op_f64_buf {
    pub fn name() -> &'static str {
        stringify!(op_f64_buf)
    }
    pub fn v8_fn_ptr<'scope>() -> deno_core::v8::FunctionCallback {
        use deno_core::v8::MapFnTo;
        Self::v8_func.map_fn_to()
    }
    pub fn decl<'scope>() -> deno_core::OpDecl {
        deno_core::OpDecl {
            name: Self::name(),
            v8_fn_ptr: Self::v8_fn_ptr(),
            enabled: true,
            fast_fn: Some(
                Box::new(op_f64_buf_fast {
                    _phantom: ::std::marker::PhantomData,
                }),
            ),
            is_async: false,
            is_unstable: false,
            is_v8: false,
            argc: 1usize,
        }
    }
    #[inline]
    #[allow(clippy::too_many_arguments)]
    fn call(buffer: &mut [f64]) {}
    pub fn v8_func<'scope>(
        scope: &mut deno_core::v8::HandleScope<'scope>,
        args: deno_core::v8::FunctionCallbackArguments,
        mut rv: deno_core::v8::ReturnValue,
    ) {
        let ctx = unsafe {
            &*(deno_core::v8::Local::<deno_core::v8::External>::cast(args.data()).value()
                as *const deno_core::_ops::OpCtx)
        };
        let arg_0 = if let Ok(view)
            = deno_core::v8::Local::<
                deno_core::v8::Float64Array,
            >::try_from(args.get(0usize as i32)) {
            let (offset, len) = (view.byte_offset(), view.byte_length());
            let buffer = match view.buffer(scope) {
                Some(v) => v,
                None => {
                    return deno_core::_ops::throw_type_error(
                        scope,
                        format!("Expected Float64Array at position {}", 0usize),
                    );
                }
            };
            if let Some(data) = buffer.data() {
                let store = data.cast::<u8>().as_ptr();
                unsafe {
                    ::std::slice::from_raw_parts_mut(
                        store.add(offset) as *mut f64,
                        len / 8,
                    )
                }
            } else {
                &mut []
            }
        } else {
            return deno_core::_ops::throw_type_error(
                scope,
                format!("Expected Float64Array at position {}", 0usize),
            );
        };
        let result = Self::call(arg_0);
        let op_state = ::std::cell::RefCell::borrow(&*ctx.state);
        op_state.tracker.track_sync(ctx.id);
    }
}
struct op_f64_buf_fast {
    _phantom: ::std::marker::PhantomData<()>,
}
impl<'scope> deno_core::v8::fast_api::FastFunction for op_f64_buf_fast {
    fn function(&self) -> *const ::std::ffi::c_void {
        op_f64_buf_fast_fn as *const ::std::ffi::c_void
    }
    fn args(&self) -> &'static [deno_core::v8::fast_api::Type] {
        use deno_core::v8::fast_api::Type::*;
        use deno_core::v8::fast_api::CType;
        &[V8Value, TypedArray(CType::Float64), CallbackOptions]
    }
    fn return_type(&self) -> deno_core::v8::fast_api::CType {
        deno_core::v8::fast_api::CType::Void
    }
}
fn op_f64_buf_fast_fn<'scope>(
    _: deno_core::v8::Local<deno_core::v8::Object>,
    buffer: *const deno_core::v8::fast_api::FastApiTypedArray<f64>,
    fast_api_callback_options: *mut deno_core::v8::fast_api::FastApiCallbackOptions,
) -> () {
    use deno_core::v8;
    use deno_core::_ops;
    let buffer = match unsafe { &*buffer }.get_storage_if_aligned() {
        Some(v) => v,
        None => {
            unsafe { &mut *fast_api_callback_options }.fallback = true;
            return Default::default();
        }
    };
    let result = op_f64_buf::call(buffer);
    result
}
